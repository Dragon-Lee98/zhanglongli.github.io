{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/matery/source/css/gitment.css","path":"css/gitment.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/matery.css","path":"css/matery.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":0,"renderable":1},{"_id":"themes/matery/source/css/my.css","path":"css/my.css","modified":0,"renderable":1},{"_id":"themes/matery/source/js/matery.js","path":"js/matery.js","modified":0,"renderable":1},{"_id":"themes/matery/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/contact.jpg","path":"medias/contact.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/logo.png","path":"medias/logo.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/clipboard.min.js","path":"libs/codeBlock/clipboard.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/jquery/jquery-2.2.0.min.js","path":"libs/jquery/jquery-2.2.0.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/explosion.min.js","path":"libs/others/explosion.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/fireworks.js","path":"libs/others/fireworks.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/snow.js","path":"libs/others/snow.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/others/text.js","path":"libs/others/text.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/0xbird.png","path":"medias/avatars/0xbird.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/ajin.jpg","path":"medias/avatars/ajin.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/antnlp.ico","path":"medias/avatars/antnlp.ico","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/avatar.jpg","path":"medias/avatars/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/babyq.png","path":"medias/avatars/babyq.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/cww97.jpg","path":"medias/avatars/cww97.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/duyupei.jpg","path":"medias/avatars/duyupei.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/feibar.jpg","path":"medias/avatars/feibar.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/feibar.png","path":"medias/avatars/feibar.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/fun4go.png","path":"medias/avatars/fun4go.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/gsy.jpg","path":"medias/avatars/gsy.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/hael.jpg","path":"medias/avatars/hael.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/huaji.jpg","path":"medias/avatars/huaji.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/hzwer.jpg","path":"medias/avatars/hzwer.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/ids2.jpg","path":"medias/avatars/ids2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/jiejie.jpg","path":"medias/avatars/jiejie.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/jingjing.jpg","path":"medias/avatars/jingjing.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/jitao.jpg","path":"medias/avatars/jitao.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/kewlgrl.jpg","path":"medias/avatars/kewlgrl.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/ldy.jpg","path":"medias/avatars/ldy.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/lijiaqian.png","path":"medias/avatars/lijiaqian.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/liyangzone.jpg","path":"medias/avatars/liyangzone.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/liyucheng.jpg","path":"medias/avatars/liyucheng.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/lyn-draw.jpg","path":"medias/avatars/lyn-draw.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/lzh.png","path":"medias/avatars/lzh.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/mashiro.jpg","path":"medias/avatars/mashiro.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/masterx.jpg","path":"medias/avatars/masterx.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/michael.jpg","path":"medias/avatars/michael.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/milyyy.jpg","path":"medias/avatars/milyyy.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/mizunashi.png","path":"medias/avatars/mizunashi.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/mouse.jpg","path":"medias/avatars/mouse.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/mpy634.png","path":"medias/avatars/mpy634.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/myzhihu.png","path":"medias/avatars/myzhihu.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/qiandongwei.jpg","path":"medias/avatars/qiandongwei.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/qianqian.png","path":"medias/avatars/qianqian.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/qiqiang.jpg","path":"medias/avatars/qiqiang.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/spacesac.png","path":"medias/avatars/spacesac.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/sunchangzhi.jpg","path":"medias/avatars/sunchangzhi.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/taotao.jpg","path":"medias/avatars/taotao.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/taowei.jpg","path":"medias/avatars/taowei.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/tawn.jpg","path":"medias/avatars/tawn.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/xiejiadong.jpg","path":"medias/avatars/xiejiadong.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/xuzhongyou.jpg","path":"medias/avatars/xuzhongyou.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/yezijie.png","path":"medias/avatars/yezijie.png","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/zhangting.jpg","path":"medias/avatars/zhangting.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/zhangyi.jpg","path":"medias/avatars/zhangyi.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/zhaokangzhe.jpg","path":"medias/avatars/zhaokangzhe.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/avatars/zzw.jpg","path":"medias/avatars/zzw.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/25.jpg","path":"medias/featureimages/25.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/24.jpg","path":"medias/featureimages/24.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/26.jpg","path":"medias/featureimages/26.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/28.jpg","path":"medias/featureimages/28.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/27.jpg","path":"medias/featureimages/27.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/css/font-awesome.min.css","path":"libs/awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/FontAwesome.otf","path":"libs/awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.eot","path":"libs/awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.svg","path":"libs/awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","path":"libs/awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff","path":"libs/awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","path":"libs/awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/daoshu.jpg","path":"medias/music/avatars/daoshu.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/tiantangdemogui.jpg","path":"medias/music/avatars/tiantangdemogui.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/yequ.jpg","path":"medias/music/avatars/yequ.jpg","modified":0,"renderable":1},{"_id":"themes/matery/source/medias/music/avatars/yiluxiangbei.jpg","path":"medias/music/avatars/yiluxiangbei.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/JS-practice.md","hash":"e0d0b22403e40b96ed75f024c9b3d10cc401fb1b","modified":1610551092422},{"_id":"source/CNAME","hash":"a6ad0999ab08c1c2d45314bbbf10819ce1ca9081","modified":1610205495965},{"_id":"source/_posts/practive-day2.md","hash":"598f1fde3c4275fc22373d2804e156813cc031c6","modified":1610550988434},{"_id":"source/404.md","hash":"d97f69ff63501de89cfd341c68e4d6ed5c8a5b3a","modified":1610205495965},{"_id":"source/_posts/practice-day1.md","hash":"171534d1363f03eb329f668a250423371aff44a4","modified":1610461807214},{"_id":"source/_data/banner.json","hash":"2a5e3916e34842c8e5283de9250c8132d3d94b97","modified":1610212402066},{"_id":"source/_posts/Vue-practice.md","hash":"f252c67baddb6caf71cd3a5f01982f96279eaec6","modified":1610462326167},{"_id":"source/_data/friends.json","hash":"6f330c0cdbfbe4e50a45527413c798defcef80d1","modified":1610205495967},{"_id":"source/_data/musics.json","hash":"32bc061f34721b4ff55f880de1d0ec5787acd2f9","modified":1610205495967},{"_id":"source/archives/index.md","hash":"a62b7d9b8a8bdf966ec5c823e71581d2b185156e","modified":1610205495970},{"_id":"source/categories/index.md","hash":"76889deb16e0d61d5c585f26a0e69f01de6cab74","modified":1610205495972},{"_id":"source/_posts/sort-algorithms.md","hash":"bad3a86a9e97ffd5162fad916c76b1bedfbf068c","modified":1610214901746},{"_id":"source/friends/index.md","hash":"1a50bb92fcf805d3188191c44f451b327db14d92","modified":1610205495974},{"_id":"source/about/index.md","hash":"a796230487794091f7fa40cd73dca56da75dd688","modified":1610208245393},{"_id":"source/contact/index.md","hash":"50a4552f14c32f7f219a148aa3cc531c053af8b2","modified":1610205495973},{"_id":"source/tags/index.md","hash":"98697833897097a5c65521ea02baa1c6f85948d8","modified":1610205495974},{"_id":"source/_posts/JS-practice/2.png","hash":"e2a0174185ee46c62e673acf21c715d95c5e381a","modified":1610462232352},{"_id":"source/_posts/JS-practice/1.png","hash":"d9694bddd57a06f464e6cfeefa47033c6f476718","modified":1610462163554},{"_id":"source/_posts/practive-day2/2.jpg","hash":"341843b582d0deef0ebd62ca0f0e43c533b57a8e","modified":1610549642422},{"_id":"source/_posts/practive-day2.assets/2.jpg","hash":"341843b582d0deef0ebd62ca0f0e43c533b57a8e","modified":1610549659730},{"_id":"source/_posts/JS-practice/0.png","hash":"e9fc7881226ce1dda4984d85702f8a6ff1848b43","modified":1610461980457},{"_id":"source/_posts/practive-day2/1.jpg","hash":"5ab7caf10e7d89027ed9b99bdfdd8eee01b21e85","modified":1610549596121},{"_id":"source/_posts/practive-day2.assets/1.jpg","hash":"5ab7caf10e7d89027ed9b99bdfdd8eee01b21e85","modified":1610549625453},{"_id":"themes/matery/.gitignore","hash":"b03f323fc6465c9b73938b1eb8dd77cb08e60e05","modified":1610291738434},{"_id":"themes/matery/_config.yml","hash":"e61283d6f261514c33207d46f457ffc77a02d100","modified":1610434602763},{"_id":"themes/matery/languages/default.yml","hash":"527c795b8c41fe62bf35603ffebfa6d4a7929a2c","modified":1610205495977},{"_id":"themes/matery/languages/zh-CN.yml","hash":"d92db4b986bb6f0d228e9a8249383103bf56342d","modified":1610205495978},{"_id":"themes/matery/layout/404.ejs","hash":"f08a0f507b36f3652520a41381f71167488405c7","modified":1610205495979},{"_id":"themes/matery/layout/about.ejs","hash":"e87752e59f021b5139b1155a264da11ab469a9aa","modified":1610205495998},{"_id":"themes/matery/layout/archive.ejs","hash":"1b5023571894404d75caffa28128fc9c49f9095d","modified":1610205495999},{"_id":"themes/matery/layout/categories.ejs","hash":"c431e772d0f7700592228bbd9502793bdc28a893","modified":1610205495999},{"_id":"themes/matery/layout/category.ejs","hash":"2d421e10c3b8fd2c4f725e5eaa967c4a1429c707","modified":1610205496000},{"_id":"themes/matery/layout/contact.ejs","hash":"1513c5a40b7cc0b6e5854cf8c3253958bcb486cb","modified":1610205496000},{"_id":"themes/matery/layout/friends.ejs","hash":"895e40a864796680fbef581e4b09f252fbdd963a","modified":1610205496001},{"_id":"themes/matery/layout/index.ejs","hash":"98c6ad52cb0a218a51a0be2639e1516c2c4660b3","modified":1610217368466},{"_id":"themes/matery/layout/layout.ejs","hash":"2ba4110dc596424b1220a259c8e594da774e7f59","modified":1610205496003},{"_id":"themes/matery/layout/post.ejs","hash":"f1a35f32e5901e167ae9a750e7cb3635549cea2e","modified":1610205496003},{"_id":"themes/matery/layout/tag.ejs","hash":"5cdf3a1d72f54285ee9cb826fd0e4a0449093215","modified":1610205496004},{"_id":"themes/matery/layout/tags.ejs","hash":"851c0ee599e91e7b1d657673859e8b6ff79cf50b","modified":1610205496004},{"_id":"themes/matery/layout/_partial/back-top.ejs","hash":"cb99dc352397ec5d0765794d7b8884972e61973b","modified":1610205495980},{"_id":"themes/matery/layout/_partial/bg-cover-content.ejs","hash":"ab610754bf6aea844b5ae0802ed37c73b5f1dc9f","modified":1610205495980},{"_id":"themes/matery/layout/_partial/bg-cover.ejs","hash":"d5a7b9bb96e04c0a3485dd873748f19c50a6a04f","modified":1610205495980},{"_id":"themes/matery/layout/_partial/disqus.ejs","hash":"42dda8e67f7f09d148347887e52f18aea546df26","modified":1610205495980},{"_id":"themes/matery/layout/_partial/footer.ejs","hash":"38e1c9bfdcb9c00adc356ee34201062618668d56","modified":1610433547158},{"_id":"themes/matery/layout/_partial/gitalk.ejs","hash":"a3a140e6aeeb6f289e4b821a577ef548267f3de1","modified":1610205495981},{"_id":"themes/matery/layout/_partial/github-link.ejs","hash":"fd4034bca2eb3987dcf113e6477260bee97eb1e7","modified":1610205495982},{"_id":"themes/matery/layout/_partial/gitment.ejs","hash":"d8c40dbc8106b5bc53ceb727ad968c1d8f234261","modified":1610205495982},{"_id":"themes/matery/layout/_partial/google-analytics.ejs","hash":"890c8f04c1f4905dfceb3ea9fd6efdd040d79c01","modified":1610205495983},{"_id":"themes/matery/layout/_partial/head.ejs","hash":"0208c72410620be3ab619d8b997bd5de1af71996","modified":1610205495983},{"_id":"themes/matery/layout/_partial/header.ejs","hash":"821e1af65990521c9e0288178d8e5b18c73a9cab","modified":1610205495983},{"_id":"themes/matery/layout/_partial/index-cover.ejs","hash":"d4042e5521ceb5f3255cd4455ac7ccd227fee6df","modified":1610214138065},{"_id":"themes/matery/layout/_partial/livere.ejs","hash":"42728561c09589f79b698eb059ab4def53ed3642","modified":1610205495984},{"_id":"themes/matery/layout/_partial/mobile-nav.ejs","hash":"e761f0104fbf431671bbe6bebc91ca82f737f4d2","modified":1610205495985},{"_id":"themes/matery/layout/_partial/navigation.ejs","hash":"3a82fcb6f31d69971cb564985842c14ac02cdca0","modified":1610205495985},{"_id":"themes/matery/layout/_partial/paging.ejs","hash":"dfdeea9c59d157acb851d4bf44bf95f81787523c","modified":1610205495985},{"_id":"themes/matery/layout/_partial/post-cover.ejs","hash":"166c0b9753f3f913bd801e82ad5b268004be198d","modified":1610205495986},{"_id":"themes/matery/layout/_partial/post-detail-toc.ejs","hash":"82cb8090cde663fa7ad67418a802997b3057e957","modified":1610205495986},{"_id":"themes/matery/layout/_partial/post-detail.ejs","hash":"3f208f33e4e12becdb8323e6e64e20ad60c3fb2a","modified":1610205495986},{"_id":"themes/matery/layout/_partial/post-statis.ejs","hash":"3b42900247d5ea4ea5b68e2be44420a0d54785ad","modified":1610205495987},{"_id":"themes/matery/layout/_partial/prev-next.ejs","hash":"4e73f10eacb5d00a0681cb44fe5c039cd8ab03cd","modified":1610205495988},{"_id":"themes/matery/layout/_partial/reprint-statement.ejs","hash":"f85a222ec3f9bc27eb7978015e63a16514b38791","modified":1610205495989},{"_id":"themes/matery/layout/_partial/reward.ejs","hash":"73624d9db81e87ff0c12310bb873fbd0b5221021","modified":1610205495989},{"_id":"themes/matery/layout/_partial/search.ejs","hash":"e859fe6e0259e0c123cb7ceda6e4cac836318ffc","modified":1610205495990},{"_id":"themes/matery/layout/_partial/share.ejs","hash":"0f2e1e27d21492cf228e786daead985b1e1dcea4","modified":1610205495990},{"_id":"themes/matery/layout/_partial/social-link.ejs","hash":"e2865b3003ec07892e9112692e7ec786ee926ae8","modified":1610205495991},{"_id":"themes/matery/layout/_partial/valine.ejs","hash":"c3039180ddb2eb17e724b8441e5f93e79859aef7","modified":1610205495991},{"_id":"themes/matery/layout/_widget/category-cloud.ejs","hash":"b2b22d4fc4e46b051f67216c391f629f4ff552b5","modified":1610205495992},{"_id":"themes/matery/layout/_widget/category-radar.ejs","hash":"5284712d84bbaa4f0d88026ac3ec5a8c13e00056","modified":1610205495992},{"_id":"themes/matery/layout/_widget/dream.ejs","hash":"6ae58a57b83a5999d0b6a737ec868f084d208f89","modified":1610205495992},{"_id":"themes/matery/layout/_widget/music.ejs","hash":"fc50cb4bbc1f4d0e4c9f5941f1c3c74bea742db7","modified":1610205495992},{"_id":"themes/matery/layout/_widget/my-gallery.ejs","hash":"9ea672db65f1e5b8fad1ffafb1614f25adc97e63","modified":1610205495993},{"_id":"themes/matery/layout/_widget/my-projects.ejs","hash":"785cb588a31215876f6737213054ba0e8552fff0","modified":1610205495993},{"_id":"themes/matery/layout/_widget/my-skills.ejs","hash":"c6f713316ce75ad08ac5d1587bd8ce42e894e9ae","modified":1610205495994},{"_id":"themes/matery/layout/_widget/post-calendar.ejs","hash":"4608af6151f0e32f668c89f09343748340021478","modified":1610205495995},{"_id":"themes/matery/layout/_widget/post-charts.ejs","hash":"0aaf0a111b9aa07ff37f6286eeac5506283f47f8","modified":1610205495996},{"_id":"themes/matery/layout/_widget/recommend.ejs","hash":"d439d86818de179d64965d4f7f5fa56147fd9221","modified":1610205495996},{"_id":"themes/matery/layout/_widget/tag-cloud.ejs","hash":"6310903eb0e434d6f9a59ca669aab7fae38d4797","modified":1610205495997},{"_id":"themes/matery/layout/_widget/tag-wordcloud.ejs","hash":"bf604fe9c435f0fb9a559cac9c35772579b590e8","modified":1610205495997},{"_id":"themes/matery/layout/_widget/video.ejs","hash":"05f5e2acace5730cdf7bed650375ad88f6b5d1b7","modified":1610205495998},{"_id":"themes/matery/README.md","hash":"7ef16198a2c5ff580f006582286354caf160c7fe","modified":1610205495976},{"_id":"themes/matery/README_CN.md","hash":"12eb26b1182a93556a82200cae1eb6ea687229c3","modified":1610291909639},{"_id":"themes/matery/source/css/gitment.css","hash":"d5ef623065d1fbc897119f7b70ccf7563e329917","modified":1610205496008},{"_id":"themes/matery/source/css/my-gitalk.css","hash":"4e3e855767ac5a48b13af1d6a42df13d8975e03f","modified":1610205496011},{"_id":"themes/matery/source/css/my.css","hash":"37683a9f11c68903a53e2b8593ca8c095a721896","modified":1610205496012},{"_id":"themes/matery/source/js/matery.js","hash":"208b7806caa943c115aa0825c9c72a0781404775","modified":1610205496015},{"_id":"themes/matery/source/css/matery.css","hash":"0d345a72318fd7aadcb6fcaa6f3abac94b91001c","modified":1610205496009},{"_id":"themes/matery/source/js/search.js","hash":"eb191cae4255d8298958ad2203def707c77ab700","modified":1610217313505},{"_id":"themes/matery/source/libs/aos/aos.css","hash":"ded9739f803d114c9168d3351fded72b3b478b4c","modified":1610205496040},{"_id":"themes/matery/source/libs/animate/animate.min.css","hash":"5dfcbcee866e9dc564916416281885f3e320871e","modified":1610205496039},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","hash":"7f4f8913f2d46ade2def5134e2cc8684a4b87939","modified":1610205496041},{"_id":"themes/matery/source/libs/aos/aos.js","hash":"5a8e6d07ffa55642418ab3fd4b263aa08284b77a","modified":1610205496041},{"_id":"themes/matery/source/libs/codeBlock/codeBlockFuction.js","hash":"a8133367d48199e7505c2d831ca848b4202b9ba6","modified":1610205496060},{"_id":"themes/matery/source/libs/codeBlock/codeLang.js","hash":"6ad8984746f0ff4e2fc81f0c04f12874fa752683","modified":1610205496062},{"_id":"themes/matery/source/libs/codeBlock/codeCopy.js","hash":"d54f6205b35dceba1d66da761c00ff9fad9cf857","modified":1610205496062},{"_id":"themes/matery/source/libs/codeBlock/clipboard.min.js","hash":"98f626d784a94ebe653b13f3a4c79e483264cae7","modified":1610205496060},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","hash":"70c0c4a9bf698747b7c058c21287ad617355e5dd","modified":1610205496042},{"_id":"themes/matery/source/libs/codeBlock/codeShrink.js","hash":"743114dcd6f3addc973778b1b248f88d42b05278","modified":1610205496062},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","hash":"33810b2b757fc4327bc1d3b83bb5e0d3dc1fec5b","modified":1610205496063},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","hash":"5d52d3b34fceb9d7e11f1beaf7ed380b4249dec4","modified":1610205496064},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","hash":"a0625d8b432af8bdc820f8768d36cde439e7257c","modified":1610205496076},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","hash":"021898a16279ac2ffe75af4f902fab2a0a39f11a","modified":1610205496073},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"26849509f196a2d21bbfd15696e5d5153163b8f1","modified":1610205496077},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","hash":"4e6538c8312aeeab845d361c37a8c1a0931241f0","modified":1610205496077},{"_id":"themes/matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1610205496091},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","hash":"a8ef41dec0a64cbfcb96d9e543bd0925d9f1fadb","modified":1610216098968},{"_id":"themes/matery/source/libs/others/explosion.min.js","hash":"5b76fa72a85cfb27d54b00128393ece773d65386","modified":1610205496092},{"_id":"themes/matery/source/libs/others/fireworks.js","hash":"e9c74f2dd3953d4d8dec44e9977574d00702e84d","modified":1610205496092},{"_id":"themes/matery/source/libs/others/snow.js","hash":"b393f069781eef788a0ae66b2681cece8fea2851","modified":1610205496092},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1610205496093},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","hash":"f646f2bb75bcd1eb65b2788ac7bf15d4fd243ce9","modified":1610205496098},{"_id":"themes/matery/source/libs/others/text.js","hash":"fdf18f65977e4bc358dfb5fb0b7c98492ae72efd","modified":1610205496092},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1610205496098},{"_id":"themes/matery/source/medias/avatars/ajin.jpg","hash":"76cb8e872472ff47a1b061c3bcff1c03f30c02b8","modified":1610205496103},{"_id":"themes/matery/source/medias/avatars/avatar.jpg","hash":"fe84468e0c175d824dad2c8d525d517c908a1f6b","modified":1595949984838},{"_id":"themes/matery/source/medias/avatars/cww97.jpg","hash":"6af987cafc55d8d031534dd5e0f722fff19f70ec","modified":1610205496107},{"_id":"themes/matery/source/medias/avatars/babyq.png","hash":"be5432588003e5a52c02e690622eec72b5f7346c","modified":1610205496106},{"_id":"themes/matery/source/medias/avatars/feibar.jpg","hash":"343f47cb5c83cd866a1c824cbe2a112d02516d06","modified":1610205496111},{"_id":"themes/matery/source/medias/avatars/fun4go.png","hash":"0f4333973a972a629cfbabf601bc7c192b65376c","modified":1610205496114},{"_id":"themes/matery/source/medias/avatars/hael.jpg","hash":"e66ccedab38bb2e8fc45fac024e234ab8e7b9d54","modified":1610205496115},{"_id":"themes/matery/source/medias/avatars/hzwer.jpg","hash":"53a66bb5e65d2abd5b7412edf094c1e0b1094492","modified":1610205496116},{"_id":"themes/matery/source/medias/avatars/huaji.jpg","hash":"86be7eed2a491455ccfe3e7da46366ff477765ca","modified":1610205496116},{"_id":"themes/matery/source/medias/avatars/ids2.jpg","hash":"2c8d3ac6ab5ac6196bac83766fde975daca91c32","modified":1610205496116},{"_id":"themes/matery/source/medias/avatars/kewlgrl.jpg","hash":"3af0fd1029a1511bb3c0e90871e41b35e714b01f","modified":1610205496122},{"_id":"themes/matery/source/medias/avatars/ldy.jpg","hash":"906ef214d1f2fe52a663738340ad5623f826bd82","modified":1610205496123},{"_id":"themes/matery/source/medias/avatars/lijiaqian.png","hash":"9d96b3838acfae9a23b6e290fcfafceff0419c63","modified":1610205496124},{"_id":"themes/matery/source/medias/avatars/liyangzone.jpg","hash":"febab557e4c0d859ab4cc14b57d8106f5e3fccfb","modified":1610205496125},{"_id":"themes/matery/source/medias/avatars/liyucheng.jpg","hash":"12055a27fa667c87d2319475968056e1a8ad0f08","modified":1610205496125},{"_id":"themes/matery/source/medias/avatars/michael.jpg","hash":"331a2ab20c299196f5a3089b8445fc8f55346cb6","modified":1610205496131},{"_id":"themes/matery/source/medias/avatars/masterx.jpg","hash":"c9f7e83d895fa241cefd6e742f356106b35f1b89","modified":1610205496130},{"_id":"themes/matery/source/medias/avatars/mouse.jpg","hash":"2eae273885b9859150a1f98f74b3df12ca9a207c","modified":1610205496134},{"_id":"themes/matery/source/medias/avatars/mpy634.png","hash":"30f88e09c02b37c2dc684d4ee3237e327bb23f8b","modified":1610205496135},{"_id":"themes/matery/source/medias/avatars/qiqiang.jpg","hash":"081459866f922d9558a88cd4d7155d91fa730322","modified":1610205496139},{"_id":"themes/matery/source/medias/avatars/spacesac.png","hash":"ff1bdb058f1f0499312da1a082ba97d78590db1a","modified":1610205496140},{"_id":"themes/matery/source/medias/avatars/sunchangzhi.jpg","hash":"bbe2a15fd474ab62dbd14fea72deb1113a4fb005","modified":1610205496141},{"_id":"themes/matery/source/medias/avatars/taotao.jpg","hash":"e668254375ddd40a684ff4669c3421851bebd36e","modified":1610205496142},{"_id":"themes/matery/source/medias/avatars/taowei.jpg","hash":"e58b03b70656aa7a27238be38dac3896d9d16f10","modified":1610205496143},{"_id":"themes/matery/source/medias/avatars/tawn.jpg","hash":"68a1cbacbb2370912b000c9d8d2b16196c918a50","modified":1610205496143},{"_id":"themes/matery/source/medias/avatars/yezijie.png","hash":"8a53537eb69f749115e512b6da061e7f23cd04e5","modified":1610205496146},{"_id":"themes/matery/source/medias/avatars/zhaokangzhe.jpg","hash":"c8242bd13f08a9ddb97e26f216bc729b12ed9058","modified":1610205496149},{"_id":"themes/matery/source/medias/banner/6.jpg","hash":"eaba0b9d6b59c804443680620b383502d95de010","modified":1610781553373},{"_id":"themes/matery/source/medias/featureimages/0.jpg","hash":"1f8bbfbd625448b4b2a748b75636e456b826dcd3","modified":1610205496198},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","hash":"f81cd7bfcf7aa2d043bd3e6077df42656fc44b82","modified":1610205496086},{"_id":"themes/matery/source/medias/featureimages/5.jpg","hash":"c4cc724f4572a9bcede7443a4f4c0393d3073868","modified":1610205496280},{"_id":"themes/matery/source/medias/reward/wechat.png","hash":"61eb27bc4ec65f4f116d34740903fb5af75bf561","modified":1610205496311},{"_id":"themes/matery/source/libs/awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1610205496043},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1610205496079},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1610205496080},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1610205496080},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1610205496081},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1610205496082},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1610205496083},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1610205496084},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1610205496083},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1610205496084},{"_id":"themes/matery/source/libs/share/css/share.min.css","hash":"7126de5cec8371e580b7b1f22512da0985cc39e5","modified":1610205496094},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1610205496095},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1610205496095},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"f8cd48e1fff82ecd54a7ce3e69de8dba7c92d113","modified":1610205496085},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1610205496096},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1610205496096},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1610205496097},{"_id":"themes/matery/source/medias/music/avatars/tiantangdemogui.jpg","hash":"f005578ddb4d3d731838db89a708f39f18d50e60","modified":1610205496305},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1610205496098},{"_id":"source/_posts/sort-algorithms/1.png","hash":"cb9865eb782b293168e69406b212a0f3097b82a4","modified":1610205495969},{"_id":"themes/matery/LICENSE","hash":"b314c7ebb7d599944981908b7f3ed33a30e78f3a","modified":1610205495975},{"_id":"themes/matery/source/medias/music/avatars/yiluxiangbei.jpg","hash":"01b12e3aca7385a88412c12539e1a608a78896fa","modified":1610205496306},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","hash":"82276be41d2001e820020a219b90ad5b026302d1","modified":1610205496065},{"_id":"themes/matery/source/libs/gitment/gitment.js","hash":"5a13983930b019450e4fe01a407c64b3dd316be4","modified":1610205496076},{"_id":"themes/matery/source/libs/jquery/jquery-2.2.0.min.js","hash":"7a551393b8360731104fdef1af36a6f3638f5855","modified":1610205496079},{"_id":"themes/matery/source/medias/music/avatars/yequ.jpg","hash":"103beb9ab33434b434fa37a30aecdb29db633024","modified":1610205496306},{"_id":"themes/matery/source/libs/valine/Valine.min.js","hash":"f1558f12d96a352e490166d543a8e821dd3bb2bc","modified":1610205496100},{"_id":"themes/matery/source/medias/avatars/antnlp.ico","hash":"29475f350b989331cebd702a315f020917d06ed8","modified":1610205496104},{"_id":"themes/matery/source/medias/avatars/duyupei.jpg","hash":"3c02ed4cf57dc37e4f4b8314bf5094833a854cb0","modified":1610205496109},{"_id":"themes/matery/source/medias/avatars/gsy.jpg","hash":"6a175e2ba56a2280d40a2e654b559be41c3a0a48","modified":1610205496114},{"_id":"themes/matery/source/medias/avatars/jiejie.jpg","hash":"a52476e25bec2391674e77a889a89341fbb29791","modified":1610205496117},{"_id":"themes/matery/source/medias/avatars/mizunashi.png","hash":"5fc300701d3b4250a307ed70e3a3aa0d5395c808","modified":1610205496133},{"_id":"themes/matery/source/medias/avatars/qiandongwei.jpg","hash":"6873551596a4513d01898ad866c4073c68270c57","modified":1610205496138},{"_id":"themes/matery/source/medias/avatars/milyyy.jpg","hash":"ac2826d9c28346efeb967df01465a2c74d9041fe","modified":1610205496132},{"_id":"themes/matery/source/medias/avatars/myzhihu.png","hash":"992e0d803160d2ae867be5eb0032d324d1cedffb","modified":1610205496137},{"_id":"themes/matery/source/medias/avatars/zhangting.jpg","hash":"10ee25ae3531f046a8bd3696c1cc8a16f0f25e1b","modified":1610205496147},{"_id":"themes/matery/source/medias/banner/1.jpg","hash":"309f484b6e69e877de6a7fb847d66497d22bbd65","modified":1610205496154},{"_id":"themes/matery/source/medias/avatars/xiejiadong.jpg","hash":"f1a31f89426bd4dccdaba2170f4fc701336702e1","modified":1610205496144},{"_id":"themes/matery/source/medias/avatars/zzw.jpg","hash":"5d385b5732644b07b937a4919abc83cb95e14513","modified":1610205496150},{"_id":"themes/matery/source/medias/avatars/xuzhongyou.jpg","hash":"1db4dfaf23cf250f222a398326562d4170d3aaa1","modified":1610205496145},{"_id":"themes/matery/source/medias/reward/alipay.jpg","hash":"9bade255a1918cfb3c3bcefbbbc8f163bf2e19e3","modified":1610205496310},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1610205496057},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1610205496059},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","hash":"f63c7c489524ccb5d95e74fcd6618116c58fb305","modified":1610205496075},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","hash":"c843f0dc497314574c608ca28cc742bb041786d5","modified":1610205496090},{"_id":"themes/matery/source/libs/valine/av-min.js","hash":"04c6b2782ce4610c429563110f6a20a47432fc4c","modified":1610205496101},{"_id":"themes/matery/source/medias/avatars/0xbird.png","hash":"f9d597dfcb49e1e2be06138b24028291f5638610","modified":1610205496103},{"_id":"themes/matery/source/medias/avatars/lyn-draw.jpg","hash":"837d5d5df4dcb086d2da114d0d85084b4ec18768","modified":1610205496127},{"_id":"themes/matery/source/medias/avatars/lzh.png","hash":"8ffcbf19d6b38b891dbe408d9a4e9513b56f247e","modified":1610205496128},{"_id":"themes/matery/source/medias/banner/2.jpg","hash":"4fcbc9dd8ec0316e9dd5bfd0caf86f1520b10b3f","modified":1610213954314},{"_id":"themes/matery/source/medias/avatars/qianqian.png","hash":"fed254c4e7eb58ee22d647acb83f1d08f4508f8f","modified":1610205496139},{"_id":"themes/matery/source/medias/featureimages/14.jpg","hash":"1c1063c29f827cf52eeef7ca8dc2d7e4efa31a76","modified":1610205496215},{"_id":"themes/matery/source/medias/featureimages/22.jpg","hash":"02ec4566225102778c3837f08b24de02faf460a6","modified":1610205496249},{"_id":"themes/matery/source/medias/avatars/feibar.png","hash":"eceaefcbbca1bf49b582eaa649d311cf4fe69dd6","modified":1610205496113},{"_id":"themes/matery/source/medias/avatars/mashiro.jpg","hash":"250e911c16eeb6acb1e6214ad3e6a3d762850a8e","modified":1610205496130},{"_id":"themes/matery/source/medias/banner/0.jpg","hash":"280fa1c6493d7fdccfc18bd486446bacd9afe623","modified":1610211302485},{"_id":"themes/matery/source/medias/featureimages/13.jpg","hash":"d8cc7a730668943dcb0776cfa240a0cf76826363","modified":1610205496212},{"_id":"themes/matery/source/medias/avatars/zhangyi.jpg","hash":"c9130036aac9a7ac8d62e33550a9d64896cdc364","modified":1610205496148},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","hash":"2c27939768606603bee3b5e6c8a722596a667e60","modified":1610205496087},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1610205496056},{"_id":"themes/matery/source/medias/avatars/jitao.jpg","hash":"5934b9baccebccbc2be2ead5d84ad32dd41f9559","modified":1610205496122},{"_id":"themes/matery/source/medias/banner/4.jpg","hash":"a3cfdee2120195ab36b2fdd074d5558852e69297","modified":1610205496161},{"_id":"themes/matery/source/medias/banner/5.jpg","hash":"6ddd1bcbb62a2d28c5be3b9acb7418849d60b2e7","modified":1610205496193},{"_id":"themes/matery/source/medias/featureimages/12.jpg","hash":"c2892770fd5617418fd33d6f834879e05b2cdafd","modified":1610205496211},{"_id":"themes/matery/source/medias/featureimages/3.jpg","hash":"ceb8e0c195a7fe7420334efa114e98cd0e1c6523","modified":1610205496270},{"_id":"themes/matery/source/medias/featureimages/25.jpg","hash":"d0668539783fc615f14178644e486a6befb90c0c","modified":1610205496259},{"_id":"themes/matery/source/medias/featureimages/28.jpg","hash":"c73036359640a67a8b17db7ba0e968c088957ab8","modified":1610205496269},{"_id":"themes/matery/source/medias/featureimages/23.jpg","hash":"ee598933707f8bb98ecbf36925f24e8a1c4bd2d6","modified":1610205496252},{"_id":"themes/matery/source/medias/contact.jpg","hash":"beb5230c645fce81cf1cdb8c046a92a1b31582cc","modified":1610205496197},{"_id":"themes/matery/source/medias/logo.png","hash":"10c7f3624ee5bfec1301fb4dc2f027173fe867f4","modified":1610206741928},{"_id":"themes/matery/source/medias/featureimages/2.jpg","hash":"1d8863277d744e1a18a2778ac26041bda5b03a98","modified":1610205496237},{"_id":"themes/matery/source/medias/featureimages/17.jpg","hash":"11a6de283124964370dbfaf0e74f2f1e9ac8394d","modified":1610205496227},{"_id":"themes/matery/source/medias/featureimages/26.jpg","hash":"c66a4e7a2e670b63759a091f9428ee7f971d7b56","modified":1610205496262},{"_id":"themes/matery/source/medias/music/avatars/daoshu.jpg","hash":"eee120fdf5ccbe86aa7d51826c4c773e76e6357f","modified":1610205496304},{"_id":"themes/matery/source/medias/avatars/jingjing.jpg","hash":"bfcab0139edb2509de984cb0a9b156879c355158","modified":1610205496120},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1610205496050},{"_id":"themes/matery/source/medias/featureimages/27.jpg","hash":"7ea6f890cc59def8b1c9f393e4ae77cd16c79aad","modified":1610205496266},{"_id":"themes/matery/source/medias/banner/3.jpg","hash":"255aaa4375da855bd80b38cfcc253de892a9d4cf","modified":1610205496159},{"_id":"themes/matery/source/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1610205496045},{"_id":"themes/matery/source/libs/awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1610205496053},{"_id":"themes/matery/source/medias/featureimages/6.jpg","hash":"698fc46e97428d73c9d4e3d254e88b9b66fb38cd","modified":1610205496284},{"_id":"themes/matery/source/medias/featureimages/16.jpg","hash":"0801e96a2f4cbd14b2ad44547e5ffbb23822e751","modified":1610205496224},{"_id":"themes/matery/source/medias/featureimages/20.jpg","hash":"84ba9cf61045de789426eeb6333910266ce29b8c","modified":1610205496242},{"_id":"themes/matery/source/medias/featureimages/21.jpg","hash":"a77810cc2224446f5d4e1a857a8d480f21e81f83","modified":1610205496248},{"_id":"themes/matery/source/medias/featureimages/1.jpg","hash":"f1d720039d654d693c32150c06c78cfc3663b0b4","modified":1610205496201},{"_id":"themes/matery/source/medias/featureimages/11.jpg","hash":"2b30186c6d78ed76fa5f278be57290c1bd22c96a","modified":1610205496209},{"_id":"themes/matery/source/medias/featureimages/19.jpg","hash":"2a47d1123d9c4c6255b7b4817a582d2fa9aea808","modified":1610205496233},{"_id":"themes/matery/source/medias/featureimages/24.jpg","hash":"72bc68fb0673b84ab9f863d2979396cdc268a76c","modified":1610205496257},{"_id":"themes/matery/source/medias/featureimages/18.jpg","hash":"c74ce6fa4eee122e147ec55532744f34a87ae2bf","modified":1610205496229},{"_id":"themes/matery/source/medias/featureimages/10.jpg","hash":"66de48d963e7f221931e550b2442da0cd40cbaa8","modified":1610205496204},{"_id":"themes/matery/source/medias/featureimages/7.jpg","hash":"bd400da9123424afe7ba6c839be9ad7697c1245b","modified":1610205496287},{"_id":"themes/matery/source/medias/featureimages/8.jpg","hash":"f81e97edf705ab45b989b2b15d6a13c005ccaa32","modified":1610205496293},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","hash":"8789b5e4daf0029a6c88f238f10e54d01c4fce82","modified":1610205496072},{"_id":"themes/matery/source/medias/featureimages/15.jpg","hash":"aff885598033614639944c7559b4849f883e2b34","modified":1610205496221},{"_id":"themes/matery/source/medias/featureimages/9.jpg","hash":"cd54b116609f5741cc7db0f7f49bf56ac356ddfb","modified":1610205496299},{"_id":"themes/matery/source/medias/featureimages/4.jpg","hash":"e06afe32a867f7a6e861618e0b5ac9d93cd71d05","modified":1610205496278},{"_id":"public/baidu_urls.txt","hash":"bbc5ab9a2b85765f5ae7e1e2de8b182e2aec199f","modified":1610781679548},{"_id":"public/baidusitemap.xml","hash":"1d0f8029f81a92769b808db96812315dcad55677","modified":1610781679548},{"_id":"public/atom.xml","hash":"d5b4ec912ace71da4c207eb6372472d4b6eadfa9","modified":1610781679548},{"_id":"public/search.xml","hash":"f6756df504bddd2d4822af7745e7621abdbf96c4","modified":1610781679548},{"_id":"public/sitemap.xml","hash":"b668f4e38ee04631240cfafcea209aaf187b14d0","modified":1610781679548},{"_id":"public/404.html","hash":"eeb9e45b0743967b7cb4db0b080cd76e813f1b88","modified":1610781679548},{"_id":"public/archives/index.html","hash":"2a2778123cb5251fdd67e2ed9dbcef2e46c305fe","modified":1610781679548},{"_id":"public/about/index.html","hash":"ab21a9b7e5a87cfa89b0a6efb57cb772108e6c88","modified":1610781679548},{"_id":"public/categories/index.html","hash":"7e5e0ba04e039ee902d6786055bbe294fcc787c6","modified":1610781679548},{"_id":"public/contact/index.html","hash":"9b2d8234ee44cc779f85697c33c5612c5dd71fc5","modified":1610781679548},{"_id":"public/friends/index.html","hash":"b5e41cd1e447fa9df0e9faa4de204cb0ad453e48","modified":1610781679548},{"_id":"public/tags/index.html","hash":"50f78babe23f03d37e1ab7d7793b34fa00839bfc","modified":1610781679548},{"_id":"public/2021/01/11/vue-practice/index.html","hash":"4c611fcd63e77d46c86b5b3f953b0f655f427e04","modified":1610781679548},{"_id":"public/2021/01/10/js-practice/index.html","hash":"e47ecec4af5d96a7e7a140fd38595d862d21158f","modified":1610781679548},{"_id":"public/2020/08/12/practive-day2/index.html","hash":"fb485de8a6d2611a177e1d508c2049a28e3103bc","modified":1610781679548},{"_id":"public/2020/08/11/practice-day1/index.html","hash":"e420987b85099a0881eccbc7c25a1d061d328d8a","modified":1610781679548},{"_id":"public/2020/02/16/sort-algorithms/index.html","hash":"d4a22d3e538ba2b22f1d5180dfaa859bdb7e7bf5","modified":1610781679548},{"_id":"public/archives/2020/index.html","hash":"9041d6f63ff690c1897a19735013722207340215","modified":1610781679548},{"_id":"public/archives/2020/02/index.html","hash":"c48a2f69f76dbb4c00760da71568669fb5b6952d","modified":1610781679548},{"_id":"public/archives/2020/08/index.html","hash":"349baa40768e5596270f0b8dd8a0918882e0136c","modified":1610781679548},{"_id":"public/archives/2021/index.html","hash":"60a507df9400a611bd3e47596dc20b1208c557cd","modified":1610781679548},{"_id":"public/archives/2021/01/index.html","hash":"5db2126f12a58549cadff6821e0982cb9fdb9568","modified":1610781679548},{"_id":"public/categories/前端面试题/index.html","hash":"ea49c7461ecbd2150a007fea1db33ca682d8a3d7","modified":1610781679548},{"_id":"public/categories/编程算法/index.html","hash":"cb667bd6d96d84e251c4f9764e7623bc945ba4e5","modified":1610781679548},{"_id":"public/index.html","hash":"27e1c4de1b6251df0b37ae020b14a4fa42e7db95","modified":1610781679548},{"_id":"public/tags/JavaScript面试题/index.html","hash":"658a3fe53113a94b0a9da6b01928a35d96308690","modified":1610781679548},{"_id":"public/tags/春招/index.html","hash":"b0506adbbc92184ea2276840d6f15539e0296f5e","modified":1610781679548},{"_id":"public/tags/Vue面试题/index.html","hash":"9f1c8f044183bc6426619604bb5f023fcf016ed6","modified":1610781679548},{"_id":"public/tags/前端刷题/index.html","hash":"8bd212a4dce963e1faf39493645a71e57d340042","modified":1610781679548},{"_id":"public/tags/牛客网/index.html","hash":"28c9326788e22b4ef0f6ba27d2d7358d43de958d","modified":1610781679548},{"_id":"public/tags/leetcode/index.html","hash":"50e1ae3a357bc88a6a1dd0631c7d6c132ed9a020","modified":1610781679548},{"_id":"public/tags/算法/index.html","hash":"f56a3d5abbed395a33150b1ed1b13fe761374cab","modified":1610781679548},{"_id":"public/CNAME","hash":"a6ad0999ab08c1c2d45314bbbf10819ce1ca9081","modified":1610781679548},{"_id":"public/medias/avatars/ajin.jpg","hash":"76cb8e872472ff47a1b061c3bcff1c03f30c02b8","modified":1610781679548},{"_id":"public/medias/avatars/avatar.jpg","hash":"fe84468e0c175d824dad2c8d525d517c908a1f6b","modified":1610781679548},{"_id":"public/medias/avatars/babyq.png","hash":"be5432588003e5a52c02e690622eec72b5f7346c","modified":1610781679548},{"_id":"public/medias/avatars/cww97.jpg","hash":"6af987cafc55d8d031534dd5e0f722fff19f70ec","modified":1610781679548},{"_id":"public/medias/avatars/feibar.jpg","hash":"343f47cb5c83cd866a1c824cbe2a112d02516d06","modified":1610781679548},{"_id":"public/medias/avatars/fun4go.png","hash":"0f4333973a972a629cfbabf601bc7c192b65376c","modified":1610781679548},{"_id":"public/medias/avatars/hael.jpg","hash":"e66ccedab38bb2e8fc45fac024e234ab8e7b9d54","modified":1610781679548},{"_id":"public/medias/avatars/huaji.jpg","hash":"86be7eed2a491455ccfe3e7da46366ff477765ca","modified":1610781679548},{"_id":"public/medias/avatars/hzwer.jpg","hash":"53a66bb5e65d2abd5b7412edf094c1e0b1094492","modified":1610781679548},{"_id":"public/medias/avatars/ids2.jpg","hash":"2c8d3ac6ab5ac6196bac83766fde975daca91c32","modified":1610781679548},{"_id":"public/medias/avatars/kewlgrl.jpg","hash":"3af0fd1029a1511bb3c0e90871e41b35e714b01f","modified":1610781679548},{"_id":"public/medias/avatars/ldy.jpg","hash":"906ef214d1f2fe52a663738340ad5623f826bd82","modified":1610781679548},{"_id":"public/medias/avatars/lijiaqian.png","hash":"9d96b3838acfae9a23b6e290fcfafceff0419c63","modified":1610781679548},{"_id":"public/medias/avatars/liyangzone.jpg","hash":"febab557e4c0d859ab4cc14b57d8106f5e3fccfb","modified":1610781679548},{"_id":"public/medias/avatars/liyucheng.jpg","hash":"12055a27fa667c87d2319475968056e1a8ad0f08","modified":1610781679548},{"_id":"public/medias/avatars/masterx.jpg","hash":"c9f7e83d895fa241cefd6e742f356106b35f1b89","modified":1610781679548},{"_id":"public/medias/avatars/michael.jpg","hash":"331a2ab20c299196f5a3089b8445fc8f55346cb6","modified":1610781679548},{"_id":"public/medias/avatars/mouse.jpg","hash":"2eae273885b9859150a1f98f74b3df12ca9a207c","modified":1610781679548},{"_id":"public/medias/avatars/mpy634.png","hash":"30f88e09c02b37c2dc684d4ee3237e327bb23f8b","modified":1610781679548},{"_id":"public/medias/avatars/qiqiang.jpg","hash":"081459866f922d9558a88cd4d7155d91fa730322","modified":1610781679548},{"_id":"public/medias/avatars/spacesac.png","hash":"ff1bdb058f1f0499312da1a082ba97d78590db1a","modified":1610781679548},{"_id":"public/medias/avatars/sunchangzhi.jpg","hash":"bbe2a15fd474ab62dbd14fea72deb1113a4fb005","modified":1610781679548},{"_id":"public/medias/avatars/taotao.jpg","hash":"e668254375ddd40a684ff4669c3421851bebd36e","modified":1610781679548},{"_id":"public/medias/avatars/taowei.jpg","hash":"e58b03b70656aa7a27238be38dac3896d9d16f10","modified":1610781679548},{"_id":"public/medias/avatars/tawn.jpg","hash":"68a1cbacbb2370912b000c9d8d2b16196c918a50","modified":1610781679548},{"_id":"public/medias/avatars/yezijie.png","hash":"8a53537eb69f749115e512b6da061e7f23cd04e5","modified":1610781679548},{"_id":"public/medias/avatars/zhaokangzhe.jpg","hash":"c8242bd13f08a9ddb97e26f216bc729b12ed9058","modified":1610781679548},{"_id":"public/medias/banner/6.jpg","hash":"eaba0b9d6b59c804443680620b383502d95de010","modified":1610781679548},{"_id":"public/medias/featureimages/0.jpg","hash":"1f8bbfbd625448b4b2a748b75636e456b826dcd3","modified":1610781679548},{"_id":"public/medias/featureimages/5.jpg","hash":"c4cc724f4572a9bcede7443a4f4c0393d3073868","modified":1610781679548},{"_id":"public/medias/reward/wechat.png","hash":"61eb27bc4ec65f4f116d34740903fb5af75bf561","modified":1610781679548},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1610781679548},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"3480f00d284c812d623ed16a9e0ead3fb964c72e","modified":1610781679548},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1610781679548},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1610781679548},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1610781679548},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"fbfdbe06aebf7d0c00da175a4810cf888d128f11","modified":1610781679548},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"1142b47de219dddfba2e712cd3189dec0c8b7bee","modified":1610781679548},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"39150b45ec5fc03155b7ebeaa44f1829281788e2","modified":1610781679548},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1610781679548},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1610781679548},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1610781679548},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1610781679548},{"_id":"public/medias/music/avatars/tiantangdemogui.jpg","hash":"f005578ddb4d3d731838db89a708f39f18d50e60","modified":1610781679548},{"_id":"public/medias/music/avatars/yequ.jpg","hash":"103beb9ab33434b434fa37a30aecdb29db633024","modified":1610781679548},{"_id":"public/medias/music/avatars/yiluxiangbei.jpg","hash":"01b12e3aca7385a88412c12539e1a608a78896fa","modified":1610781679548},{"_id":"public/2021/01/10/js-practice/1.png","hash":"d9694bddd57a06f464e6cfeefa47033c6f476718","modified":1610781679548},{"_id":"public/2021/01/10/js-practice/2.png","hash":"e2a0174185ee46c62e673acf21c715d95c5e381a","modified":1610781679548},{"_id":"public/2020/08/12/practive-day2/2.jpg","hash":"341843b582d0deef0ebd62ca0f0e43c533b57a8e","modified":1610781679548},{"_id":"public/2020/02/16/sort-algorithms/1.png","hash":"cb9865eb782b293168e69406b212a0f3097b82a4","modified":1610781679548},{"_id":"public/css/prism-tomorrow.css","hash":"3b99487dfc9b4e51e9105a93743b92a761840e34","modified":1610781679548},{"_id":"public/css/prism-line-numbers.css","hash":"e0db113a99e4a09d2161a539b1652d96e4a22fac","modified":1610781679548},{"_id":"public/medias/avatars/antnlp.ico","hash":"29475f350b989331cebd702a315f020917d06ed8","modified":1610781679548},{"_id":"public/medias/avatars/duyupei.jpg","hash":"3c02ed4cf57dc37e4f4b8314bf5094833a854cb0","modified":1610781679548},{"_id":"public/medias/avatars/jiejie.jpg","hash":"a52476e25bec2391674e77a889a89341fbb29791","modified":1610781679548},{"_id":"public/medias/avatars/gsy.jpg","hash":"6a175e2ba56a2280d40a2e654b559be41c3a0a48","modified":1610781679548},{"_id":"public/medias/avatars/milyyy.jpg","hash":"ac2826d9c28346efeb967df01465a2c74d9041fe","modified":1610781679548},{"_id":"public/medias/avatars/mizunashi.png","hash":"5fc300701d3b4250a307ed70e3a3aa0d5395c808","modified":1610781679548},{"_id":"public/medias/avatars/myzhihu.png","hash":"992e0d803160d2ae867be5eb0032d324d1cedffb","modified":1610781679548},{"_id":"public/medias/avatars/qiandongwei.jpg","hash":"6873551596a4513d01898ad866c4073c68270c57","modified":1610781679548},{"_id":"public/medias/avatars/xiejiadong.jpg","hash":"f1a31f89426bd4dccdaba2170f4fc701336702e1","modified":1610781679548},{"_id":"public/medias/avatars/xuzhongyou.jpg","hash":"1db4dfaf23cf250f222a398326562d4170d3aaa1","modified":1610781679548},{"_id":"public/medias/avatars/zhangting.jpg","hash":"10ee25ae3531f046a8bd3696c1cc8a16f0f25e1b","modified":1610781679548},{"_id":"public/medias/avatars/zzw.jpg","hash":"5d385b5732644b07b937a4919abc83cb95e14513","modified":1610781679548},{"_id":"public/medias/banner/1.jpg","hash":"309f484b6e69e877de6a7fb847d66497d22bbd65","modified":1610781679548},{"_id":"public/medias/reward/alipay.jpg","hash":"9bade255a1918cfb3c3bcefbbbc8f163bf2e19e3","modified":1610781679548},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1610781679548},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1610781679548},{"_id":"public/2021/01/10/js-practice/0.png","hash":"e9fc7881226ce1dda4984d85702f8a6ff1848b43","modified":1610781679548},{"_id":"public/2020/08/12/practive-day2/1.jpg","hash":"5ab7caf10e7d89027ed9b99bdfdd8eee01b21e85","modified":1610781679548},{"_id":"public/medias/avatars/0xbird.png","hash":"f9d597dfcb49e1e2be06138b24028291f5638610","modified":1610781679548},{"_id":"public/medias/avatars/lyn-draw.jpg","hash":"837d5d5df4dcb086d2da114d0d85084b4ec18768","modified":1610781679548},{"_id":"public/medias/avatars/lzh.png","hash":"8ffcbf19d6b38b891dbe408d9a4e9513b56f247e","modified":1610781679548},{"_id":"public/medias/avatars/qianqian.png","hash":"fed254c4e7eb58ee22d647acb83f1d08f4508f8f","modified":1610781679548},{"_id":"public/medias/banner/2.jpg","hash":"4fcbc9dd8ec0316e9dd5bfd0caf86f1520b10b3f","modified":1610781679548},{"_id":"public/libs/awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1610781679548},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1610781679548},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1610781679548},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1610781679548},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1610781679548},{"_id":"public/css/my-gitalk.css","hash":"eeda46a83d0db1cc239a9cd27d544faf663f9883","modified":1610781679548},{"_id":"public/js/matery.js","hash":"92f07106944f5ef7cd72e84bb3534513d00eebe1","modified":1610781679548},{"_id":"public/js/search.js","hash":"9fe59d2f10fb51aae2ba5d62996af3058185d0fa","modified":1610781679548},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1610781679548},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1610781679548},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1610781679548},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"b74a381adf6ef8404d6a0452c2b9f44b47219c80","modified":1610781679548},{"_id":"public/libs/codeBlock/codeLang.js","hash":"ea8b51e4d75e7b2cd63e4d5bcb8db2cf7f23f5db","modified":1610781679548},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"215910dc8f63fd50b97957e5fcdc8480aa2728cb","modified":1610781679548},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1610781679548},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1610781679548},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1610781679548},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"d524feb633a9a6332e0204d9c80882a6aa712bbd","modified":1610781679548},{"_id":"public/libs/others/explosion.min.js","hash":"417b68e2cf2c6de2119c57626f4412105a8457f5","modified":1610781679548},{"_id":"public/libs/others/fireworks.js","hash":"53981959bc6def4a85bbbb41b07e4b1474a2124d","modified":1610781679548},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1610781679548},{"_id":"public/libs/others/snow.js","hash":"7f3b1ad2f64d4473210a2c3218893649c73c980e","modified":1610781679548},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1610781679548},{"_id":"public/libs/others/text.js","hash":"1791782cde0d1e4197f2ed58ecb7dd6aefddd169","modified":1610781679548},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1610781679548},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1610781679548},{"_id":"public/medias/avatars/jitao.jpg","hash":"5934b9baccebccbc2be2ead5d84ad32dd41f9559","modified":1610781679548},{"_id":"public/medias/avatars/mashiro.jpg","hash":"250e911c16eeb6acb1e6214ad3e6a3d762850a8e","modified":1610781679548},{"_id":"public/medias/banner/0.jpg","hash":"280fa1c6493d7fdccfc18bd486446bacd9afe623","modified":1610781679548},{"_id":"public/medias/featureimages/13.jpg","hash":"d8cc7a730668943dcb0776cfa240a0cf76826363","modified":1610781679548},{"_id":"public/medias/featureimages/14.jpg","hash":"1c1063c29f827cf52eeef7ca8dc2d7e4efa31a76","modified":1610781679548},{"_id":"public/medias/featureimages/22.jpg","hash":"02ec4566225102778c3837f08b24de02faf460a6","modified":1610781679548},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1610781679548},{"_id":"public/libs/codeBlock/clipboard.min.js","hash":"9cd57c67fbd3e3067f80793ef8445f5ff7783563","modified":1610781679548},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1610781679548},{"_id":"public/libs/gitalk/gitalk.css","hash":"3aac1db83b0135c521187254ff302d125cc30706","modified":1610781679548},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1610781679548},{"_id":"public/libs/awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1610781679548},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1610781679548},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"16ce82901ca0e302cf47a35fb10f59009a5e7eb9","modified":1610781679548},{"_id":"public/libs/share/js/social-share.min.js","hash":"4df722bafde2c5d8faaace0d1f894798385a8793","modified":1610781679548},{"_id":"public/medias/contact.jpg","hash":"beb5230c645fce81cf1cdb8c046a92a1b31582cc","modified":1610781679548},{"_id":"public/medias/avatars/feibar.png","hash":"eceaefcbbca1bf49b582eaa649d311cf4fe69dd6","modified":1610781679548},{"_id":"public/medias/avatars/zhangyi.jpg","hash":"c9130036aac9a7ac8d62e33550a9d64896cdc364","modified":1610781679548},{"_id":"public/medias/featureimages/12.jpg","hash":"c2892770fd5617418fd33d6f834879e05b2cdafd","modified":1610781679548},{"_id":"public/medias/featureimages/2.jpg","hash":"1d8863277d744e1a18a2778ac26041bda5b03a98","modified":1610781679548},{"_id":"public/medias/featureimages/23.jpg","hash":"ee598933707f8bb98ecbf36925f24e8a1c4bd2d6","modified":1610781679548},{"_id":"public/medias/featureimages/25.jpg","hash":"d0668539783fc615f14178644e486a6befb90c0c","modified":1610781679548},{"_id":"public/medias/featureimages/28.jpg","hash":"c73036359640a67a8b17db7ba0e968c088957ab8","modified":1610781679548},{"_id":"public/medias/featureimages/3.jpg","hash":"ceb8e0c195a7fe7420334efa114e98cd0e1c6523","modified":1610781679548},{"_id":"public/medias/music/avatars/daoshu.jpg","hash":"eee120fdf5ccbe86aa7d51826c4c773e76e6357f","modified":1610781679548},{"_id":"public/css/matery.css","hash":"caa63c2c7908e45ebbbea0fbdc72d09b7b6d5b76","modified":1610781679548},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1610781679548},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1610781679548},{"_id":"public/medias/logo.png","hash":"10c7f3624ee5bfec1301fb4dc2f027173fe867f4","modified":1610781679548},{"_id":"public/medias/avatars/jingjing.jpg","hash":"bfcab0139edb2509de984cb0a9b156879c355158","modified":1610781679548},{"_id":"public/medias/banner/4.jpg","hash":"a3cfdee2120195ab36b2fdd074d5558852e69297","modified":1610781679548},{"_id":"public/medias/featureimages/17.jpg","hash":"11a6de283124964370dbfaf0e74f2f1e9ac8394d","modified":1610781679548},{"_id":"public/medias/featureimages/26.jpg","hash":"c66a4e7a2e670b63759a091f9428ee7f971d7b56","modified":1610781679548},{"_id":"public/medias/featureimages/27.jpg","hash":"7ea6f890cc59def8b1c9f393e4ae77cd16c79aad","modified":1610781679548},{"_id":"public/medias/featureimages/7.jpg","hash":"bd400da9123424afe7ba6c839be9ad7697c1245b","modified":1610781679548},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1610781679548},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1610781679548},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1610781679548},{"_id":"public/medias/featureimages/20.jpg","hash":"84ba9cf61045de789426eeb6333910266ce29b8c","modified":1610781679548},{"_id":"public/medias/featureimages/6.jpg","hash":"698fc46e97428d73c9d4e3d254e88b9b66fb38cd","modified":1610781679548},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1610781679548},{"_id":"public/libs/valine/Valine.min.js","hash":"4e34802ccbb59f1daa58a62241ff57f923e50600","modified":1610781679548},{"_id":"public/medias/banner/3.jpg","hash":"255aaa4375da855bd80b38cfcc253de892a9d4cf","modified":1610781679548},{"_id":"public/medias/banner/5.jpg","hash":"6ddd1bcbb62a2d28c5be3b9acb7418849d60b2e7","modified":1610781679548},{"_id":"public/medias/featureimages/18.jpg","hash":"c74ce6fa4eee122e147ec55532744f34a87ae2bf","modified":1610781679548},{"_id":"public/medias/featureimages/19.jpg","hash":"2a47d1123d9c4c6255b7b4817a582d2fa9aea808","modified":1610781679548},{"_id":"public/medias/featureimages/21.jpg","hash":"a77810cc2224446f5d4e1a857a8d480f21e81f83","modified":1610781679548},{"_id":"public/medias/featureimages/24.jpg","hash":"72bc68fb0673b84ab9f863d2979396cdc268a76c","modified":1610781679548},{"_id":"public/libs/awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1610781679548},{"_id":"public/libs/jquery/jquery-2.2.0.min.js","hash":"5d7e5bbfa540f0e53bd599e4305e1a4e815b5dd1","modified":1610781679548},{"_id":"public/medias/featureimages/11.jpg","hash":"2b30186c6d78ed76fa5f278be57290c1bd22c96a","modified":1610781679548},{"_id":"public/medias/featureimages/1.jpg","hash":"f1d720039d654d693c32150c06c78cfc3663b0b4","modified":1610781679548},{"_id":"public/medias/featureimages/10.jpg","hash":"66de48d963e7f221931e550b2442da0cd40cbaa8","modified":1610781679548},{"_id":"public/medias/featureimages/16.jpg","hash":"0801e96a2f4cbd14b2ad44547e5ffbb23822e751","modified":1610781679548},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1610781679548},{"_id":"public/libs/materialize/materialize.min.css","hash":"4d46df5f22cbc24eefa76228c7ee308dc3585594","modified":1610781679548},{"_id":"public/libs/valine/av-min.js","hash":"2577e72b52b736d99649f9e95be8976d58563333","modified":1610781679548},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"28bdb33c9eb609c2f30d431df1a4cf8ca70bf841","modified":1610781679548},{"_id":"public/medias/featureimages/8.jpg","hash":"f81e97edf705ab45b989b2b15d6a13c005ccaa32","modified":1610781679548},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1610781679548},{"_id":"public/medias/featureimages/15.jpg","hash":"aff885598033614639944c7559b4849f883e2b34","modified":1610781679548},{"_id":"public/medias/featureimages/9.jpg","hash":"cd54b116609f5741cc7db0f7f49bf56ac356ddfb","modified":1610781679548},{"_id":"public/medias/featureimages/4.jpg","hash":"e06afe32a867f7a6e861618e0b5ac9d93cd71d05","modified":1610781679548},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1610781679548}],"Category":[{"name":"前端面试题","_id":"ckjzdt5mp000480w11u7e15z8"},{"name":"编程算法","_id":"ckjzdt5ni000l80w11xfs4sgh"}],"Data":[{"_id":"banner","data":[{"name":"0.jpg"},{"name":"1.jpg"},{"name":"6.jpg"},{"name":"3.jpg"},{"name":"4.jpg"},{"name":"5.jpg"}]},{"_id":"friends","data":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}]},{"_id":"musics","data":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}],"Page":[{"title":"404","date":"2019-07-19T08:41:10.000Z","type":"404","layout":"404","description":"你来到了没有知识的荒原 :(","_content":"","source":"404.md","raw":"---\ntitle: 404\ndate: 2019-07-19 16:41:10\ntype: \"404\"\nlayout: \"404\"\ndescription: \"你来到了没有知识的荒原 :(\"\n---\n","updated":"2021-01-09T15:18:15.965Z","path":"404.html","comments":1,"_id":"ckjzdt5ly000080w12puv9fak","content":"","site":{"data":{"banner":[{"name":"0.jpg"},{"name":"1.jpg"},{"name":"6.jpg"},{"name":"3.jpg"},{"name":"4.jpg"},{"name":"5.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":""},{"title":"archives","date":"2019-07-19T08:39:20.000Z","type":"archives","layout":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2019-07-19 16:39:20\ntype: \"archives\"\nlayout: \"archives\"\n---","updated":"2021-01-09T15:18:15.970Z","path":"archives/index.html","comments":1,"_id":"ckjzdt5mm000280w1aocf1263","content":"","site":{"data":{"banner":[{"name":"0.jpg"},{"name":"1.jpg"},{"name":"6.jpg"},{"name":"3.jpg"},{"name":"4.jpg"},{"name":"5.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":""},{"title":"about","date":"2021-01-10T08:41:10.000Z","type":"about","layout":"about","_content":"\n\n## 教育经历\n\n* <b>本科 网络工程</b>\n广东第二师范大学\n2017/09 - 2021/06\n<b>优秀毕业生</b>\n\n## 获得荣誉\n### 2017-2018学年度\n* <b>获优秀学生</b>\n* <b>获三等奖学金</b>\n大一学年\n\n### 2018-2019学年度\n* <b>获校运会4X100M第三名</b>\n* <b>获第六届泰迪杯数据挖掘广东省三等奖</b>\n大二学年\n\n### 2019-2020学年度\n* <b>获优秀学生干部</b>\n* <b>获优秀学生</b>\n* <b>获三等奖学金</b>\n* <b>获校运会100M第三名</b>\n* <b>获校运会200M第二名</b>\n* <b>获校运会4X100M第一名</b>\n* <b>获优秀运动员</b>\n* <b>获国家励志奖学金</b>\n大三学年\n\n\n## 联系方式\n* <b>电子邮箱</b>\nl13202350062@qq.com\n\n* <b>地址</b>\n广东第二师范学院花都校区\n\n\n<!-- ![](/medias/contact.jpg) -->","source":"about/index.md","raw":"---\ntitle: about\ndate: 2021-01-10 16:41:10\ntype: \"about\"\nlayout: \"about\"\n---\n\n\n## 教育经历\n\n* <b>本科 网络工程</b>\n广东第二师范大学\n2017/09 - 2021/06\n<b>优秀毕业生</b>\n\n## 获得荣誉\n### 2017-2018学年度\n* <b>获优秀学生</b>\n* <b>获三等奖学金</b>\n大一学年\n\n### 2018-2019学年度\n* <b>获校运会4X100M第三名</b>\n* <b>获第六届泰迪杯数据挖掘广东省三等奖</b>\n大二学年\n\n### 2019-2020学年度\n* <b>获优秀学生干部</b>\n* <b>获优秀学生</b>\n* <b>获三等奖学金</b>\n* <b>获校运会100M第三名</b>\n* <b>获校运会200M第二名</b>\n* <b>获校运会4X100M第一名</b>\n* <b>获优秀运动员</b>\n* <b>获国家励志奖学金</b>\n大三学年\n\n\n## 联系方式\n* <b>电子邮箱</b>\nl13202350062@qq.com\n\n* <b>地址</b>\n广东第二师范学院花都校区\n\n\n<!-- ![](/medias/contact.jpg) -->","updated":"2021-01-09T16:04:05.393Z","path":"about/index.html","comments":1,"_id":"ckjzdt5mt000680w17fgy2fhv","content":"<h2 id=\"教育经历\"><a href=\"#教育经历\" class=\"headerlink\" title=\"教育经历\"></a>教育经历</h2><ul>\n<li><b>本科 网络工程</b><br>广东第二师范大学<br>2017/09 - 2021/06<br><b>优秀毕业生</b></li>\n</ul>\n<h2 id=\"获得荣誉\"><a href=\"#获得荣誉\" class=\"headerlink\" title=\"获得荣誉\"></a>获得荣誉</h2><h3 id=\"2017-2018学年度\"><a href=\"#2017-2018学年度\" class=\"headerlink\" title=\"2017-2018学年度\"></a>2017-2018学年度</h3><ul>\n<li><b>获优秀学生</b></li>\n<li><b>获三等奖学金</b><br>大一学年</li>\n</ul>\n<h3 id=\"2018-2019学年度\"><a href=\"#2018-2019学年度\" class=\"headerlink\" title=\"2018-2019学年度\"></a>2018-2019学年度</h3><ul>\n<li><b>获校运会4X100M第三名</b></li>\n<li><b>获第六届泰迪杯数据挖掘广东省三等奖</b><br>大二学年</li>\n</ul>\n<h3 id=\"2019-2020学年度\"><a href=\"#2019-2020学年度\" class=\"headerlink\" title=\"2019-2020学年度\"></a>2019-2020学年度</h3><ul>\n<li><b>获优秀学生干部</b></li>\n<li><b>获优秀学生</b></li>\n<li><b>获三等奖学金</b></li>\n<li><b>获校运会100M第三名</b></li>\n<li><b>获校运会200M第二名</b></li>\n<li><b>获校运会4X100M第一名</b></li>\n<li><b>获优秀运动员</b></li>\n<li><b>获国家励志奖学金</b><br>大三学年</li>\n</ul>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><ul>\n<li><p><b>电子邮箱</b><br><a href=\"mailto:l13202350062@qq.com\">l13202350062@qq.com</a></p>\n</li>\n<li><p><b>地址</b><br>广东第二师范学院花都校区</p>\n</li>\n</ul>\n<!-- ![](/medias/contact.jpg) -->","site":{"data":{"banner":[{"name":"0.jpg"},{"name":"1.jpg"},{"name":"6.jpg"},{"name":"3.jpg"},{"name":"4.jpg"},{"name":"5.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h2 id=\"教育经历\"><a href=\"#教育经历\" class=\"headerlink\" title=\"教育经历\"></a>教育经历</h2><ul>\n<li><b>本科 网络工程</b><br>广东第二师范大学<br>2017/09 - 2021/06<br><b>优秀毕业生</b></li>\n</ul>\n<h2 id=\"获得荣誉\"><a href=\"#获得荣誉\" class=\"headerlink\" title=\"获得荣誉\"></a>获得荣誉</h2><h3 id=\"2017-2018学年度\"><a href=\"#2017-2018学年度\" class=\"headerlink\" title=\"2017-2018学年度\"></a>2017-2018学年度</h3><ul>\n<li><b>获优秀学生</b></li>\n<li><b>获三等奖学金</b><br>大一学年</li>\n</ul>\n<h3 id=\"2018-2019学年度\"><a href=\"#2018-2019学年度\" class=\"headerlink\" title=\"2018-2019学年度\"></a>2018-2019学年度</h3><ul>\n<li><b>获校运会4X100M第三名</b></li>\n<li><b>获第六届泰迪杯数据挖掘广东省三等奖</b><br>大二学年</li>\n</ul>\n<h3 id=\"2019-2020学年度\"><a href=\"#2019-2020学年度\" class=\"headerlink\" title=\"2019-2020学年度\"></a>2019-2020学年度</h3><ul>\n<li><b>获优秀学生干部</b></li>\n<li><b>获优秀学生</b></li>\n<li><b>获三等奖学金</b></li>\n<li><b>获校运会100M第三名</b></li>\n<li><b>获校运会200M第二名</b></li>\n<li><b>获校运会4X100M第一名</b></li>\n<li><b>获优秀运动员</b></li>\n<li><b>获国家励志奖学金</b><br>大三学年</li>\n</ul>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><ul>\n<li><p><b>电子邮箱</b><br><a href=\"mailto:l13202350062@qq.com\">l13202350062@qq.com</a></p>\n</li>\n<li><p><b>地址</b><br>广东第二师范学院花都校区</p>\n</li>\n</ul>\n<!-- ![](/medias/contact.jpg) -->"},{"title":"categories","date":"2019-07-19T08:39:20.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-07-19 16:39:20\ntype: \"categories\"\nlayout: \"categories\"\n---","updated":"2021-01-09T15:18:15.972Z","path":"categories/index.html","comments":1,"_id":"ckjzdt5mv000880w12ym34rp6","content":"","site":{"data":{"banner":[{"name":"0.jpg"},{"name":"1.jpg"},{"name":"6.jpg"},{"name":"3.jpg"},{"name":"4.jpg"},{"name":"5.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":""},{"title":"contact","date":"2019-07-26T09:17:02.000Z","type":"contact","layout":"contact","_content":"\n# 欢迎留言\n大家有任何问题，都可以在评论区给我留言，或者加 QQ 技术交流群【群号：864832264】。\n\n我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在评论区留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**godweiyang\n* **地址：**https://godweiyang.com\n* **简介：**公众号【算法码上来】，分享深度学习与NLP算法\n* **头像：**https://godweiyang.com/medias/avatars/avatar.jpg\n","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2019-07-26 17:17:02\ntype: \"contact\"\nlayout: \"contact\"\n---\n\n# 欢迎留言\n大家有任何问题，都可以在评论区给我留言，或者加 QQ 技术交流群【群号：864832264】。\n\n我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在评论区留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**godweiyang\n* **地址：**https://godweiyang.com\n* **简介：**公众号【算法码上来】，分享深度学习与NLP算法\n* **头像：**https://godweiyang.com/medias/avatars/avatar.jpg\n","updated":"2021-01-09T15:18:15.973Z","path":"contact/index.html","comments":1,"_id":"ckjzdt5mx000a80w1ht5555nu","content":"<h1 id=\"欢迎留言\"><a href=\"#欢迎留言\" class=\"headerlink\" title=\"欢迎留言\"></a>欢迎留言</h1><p>大家有任何问题，都可以在评论区给我留言，或者加 QQ 技术交流群【群号：864832264】。</p>\n<p>我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。</p>\n<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在评论区留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>godweiyang</li>\n<li><strong>地址：</strong><a href=\"https://godweiyang.com\">https://godweiyang.com</a></li>\n<li><strong>简介：</strong>公众号【算法码上来】，分享深度学习与NLP算法</li>\n<li><strong>头像：</strong><a href=\"https://godweiyang.com/medias/avatars/avatar.jpg\">https://godweiyang.com/medias/avatars/avatar.jpg</a></li>\n</ul>\n","site":{"data":{"banner":[{"name":"0.jpg"},{"name":"1.jpg"},{"name":"6.jpg"},{"name":"3.jpg"},{"name":"4.jpg"},{"name":"5.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h1 id=\"欢迎留言\"><a href=\"#欢迎留言\" class=\"headerlink\" title=\"欢迎留言\"></a>欢迎留言</h1><p>大家有任何问题，都可以在评论区给我留言，或者加 QQ 技术交流群【群号：864832264】。</p>\n<p>我很忙啦，如果不是很麻烦的问题就直接在评论区留言啦。</p>\n<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在评论区留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>godweiyang</li>\n<li><strong>地址：</strong><a href=\"https://godweiyang.com\">https://godweiyang.com</a></li>\n<li><strong>简介：</strong>公众号【算法码上来】，分享深度学习与NLP算法</li>\n<li><strong>头像：</strong><a href=\"https://godweiyang.com/medias/avatars/avatar.jpg\">https://godweiyang.com/medias/avatars/avatar.jpg</a></li>\n</ul>\n"},{"title":"friends","date":"2019-07-19T08:42:10.000Z","type":"friends","layout":"friends","_content":"\n# 友链交换\n想要交换友链的小伙伴，欢迎在留言板留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**godweiyang\n* **地址：**https://godweiyang.com\n* **简介：**公众号【算法码上来】，分享深度学习与NLP算法\n* **头像：**https://godweiyang.com/medias/avatars/avatar.jpg\n","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2019-07-19 16:42:10\ntype: \"friends\"\nlayout: \"friends\"\n---\n\n# 友链交换\n想要交换友链的小伙伴，欢迎在留言板留言，留言格式：\n* **名称：**你的博客名称\n* **地址：**你的博客地址\n* **简介：**一句话简介\n* **头像：**你的头像地址\n\n例如我的博客友链，大家可以加到自己博客里哦：\n* **名称：**godweiyang\n* **地址：**https://godweiyang.com\n* **简介：**公众号【算法码上来】，分享深度学习与NLP算法\n* **头像：**https://godweiyang.com/medias/avatars/avatar.jpg\n","updated":"2021-01-09T15:18:15.974Z","path":"friends/index.html","comments":1,"_id":"ckjzdt5ne000e80w1cf7wh2hh","content":"<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在留言板留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>godweiyang</li>\n<li><strong>地址：</strong><a href=\"https://godweiyang.com\">https://godweiyang.com</a></li>\n<li><strong>简介：</strong>公众号【算法码上来】，分享深度学习与NLP算法</li>\n<li><strong>头像：</strong><a href=\"https://godweiyang.com/medias/avatars/avatar.jpg\">https://godweiyang.com/medias/avatars/avatar.jpg</a></li>\n</ul>\n","site":{"data":{"banner":[{"name":"0.jpg"},{"name":"1.jpg"},{"name":"6.jpg"},{"name":"3.jpg"},{"name":"4.jpg"},{"name":"5.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h1 id=\"友链交换\"><a href=\"#友链交换\" class=\"headerlink\" title=\"友链交换\"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在留言板留言，留言格式：</p>\n<ul>\n<li><strong>名称：</strong>你的博客名称</li>\n<li><strong>地址：</strong>你的博客地址</li>\n<li><strong>简介：</strong>一句话简介</li>\n<li><strong>头像：</strong>你的头像地址</li>\n</ul>\n<p>例如我的博客友链，大家可以加到自己博客里哦：</p>\n<ul>\n<li><strong>名称：</strong>godweiyang</li>\n<li><strong>地址：</strong><a href=\"https://godweiyang.com\">https://godweiyang.com</a></li>\n<li><strong>简介：</strong>公众号【算法码上来】，分享深度学习与NLP算法</li>\n<li><strong>头像：</strong><a href=\"https://godweiyang.com/medias/avatars/avatar.jpg\">https://godweiyang.com/medias/avatars/avatar.jpg</a></li>\n</ul>\n"},{"title":"tags","date":"2019-07-19T08:40:27.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-07-19 16:40:27\ntype: \"tags\"\nlayout: \"tags\"\n---","updated":"2021-01-09T15:18:15.974Z","path":"tags/index.html","comments":1,"_id":"ckjzdt5nf000f80w11n238faz","content":"","site":{"data":{"banner":[{"name":"0.jpg"},{"name":"1.jpg"},{"name":"6.jpg"},{"name":"3.jpg"},{"name":"4.jpg"},{"name":"5.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":""}],"Post":[{"title":"JS面试题总结","cover":true,"img":"http://pc.lzlstudy.top/img/banner/0.jpg","top":false,"date":"2021-01-10T02:09:23.000Z","summary":"本文为个人准备前端面试过程中的学习笔记。","_content":"\n\n# 数据类型\n\n1.基本数据类型：String Number Boolean Undefined Null Symbol BigInt\n\n2.引用数据类型：Object Array Date Function\n\n\n\n# 判断数组和对象的方法\n\n1.typeof除了array和null判断为object外，其他的都可以正常判断\n\n2.参数 instanceof Array|Object\n\n```\nvar arr = [1,2,3,1];\nalert(arr instanceof Array); // true\n```\n\n3.对象的constructor属性 \n\n```\nvar arr = [1,2,3,1];\nalert(arr.constructor === Array); // true \n```\n\n以上两种方法看似完美，其实还有bug。由于每个iframe都有一套自己的执行环境，跨frame实例化的对象彼此是不共享原型链的，因此导致上述检测代码失效\n\n4.判断是否为数组 Array.isArray(参数) 是则返回true\n\n5.Obejct.protoType.toString.call(参数)\n\n```\nvar arr = [1,2,3,1];\nvar arr2 = [{ abac : 1, abc : 2 }];\nfunction isArrayFn(value){\nif (typeof Array.isArray === \"function\") {\nreturn Array.isArray(value);\n}else{\nreturn Object.prototype.toString.call(value) === \"[object Array]\";\n}\n}\nalert(isArrayFn(arr));// true\nalert(isArrayFn(arr2));// true\n```\n\n\n\n# 深拷贝和浅拷贝的区别?\n\n**浅拷贝:**将内存中的某个对象复制一份,在内存中开辟一块新的空间,如果复制的这个对象的属性为基本数据类型         ,则拷贝的便为这个值本身,如果为复杂数据类型,则拷贝复制的为地址,因此,修改新对象会对原对象产生影响\n\n**深拷贝:**开辟一块新的空间,完整的复制一份,包括复杂数据类型,拷贝的这个对象和原对象无任何关系,修改什么 的都互不影响\n\n```\nfunction deepClone(obj) {\n\tif (obj === null) return null; //null 的情况\n\tif (obj instanceof RegExp) return new RegExp(obj); //正则表达式的情况\n    if (obj instanceof Date) return new Date(obj); //日期对象的情况\n    if (typeof obj != \"object\") {\n    \t//非复杂类型,直接返回 也是结束递归的条件\n   \t\treturn obj\n    }\n    //[].__proto__.constructor=Array()\n    //{}.__proto__.constructor=Object()\n    //因此处理数组的情况时,可以取巧用这个办法来new新对象\n    var newObj = new Object.getPrototypeOf(obj).constructor;\n\tfor (var key in obj) {\n\t\tnewObj[key] = deepClone(obj[key])\n\t}\n\treturn newObj;\n}\n```\n\n\n\n# typeof 和 instanceof的区别?   \n\n**typeof**可以判断出基本数据类型Number|String|Boolean|Undefined|Symbol|BigInt(除了null),还可以正确判断出某个对象是否为function,其余的Date,Array等无法判断 ;**instanceof**相反,可以准确判断出复杂数据类型,但是无法判断简单数据类型.\n\n**instanceof**的原理：\n\n[对象] instanceof [构造函数]\n\n只要右边变量的 prototype 在左边变量的原型链上即可。因此，instanceof 在查找的过程中会遍历左边变量的原型链，直到找到右边变量的 prototype，如果查找失败，则会返回 false\n\n\n\n# JavaScript 原型\n\n原型的英文应该叫做 `prototype`，任何一个对象都有原型，我们可以通过非标准属性 `__proto__`来访问一个对象的原型：\n\n```\n// 纯对象的原型默认是个空对象\nconsole.log({}.__proto__); // => {}\n\nfunction Student(name, grade) {\n  this.name = name;\n  this.grade = grade;\n}\n\nconst stu = new Student('xiaoMing', 6);\n// Student 类型实例的原型，默认也是一个空对象\nconsole.log(stu.__proto__); // => Student {}\n```\n\n`__proto__` 是非标准属性，如果要访问一个对象的原型，建议使用 ES6 新增的`Reflect.getPrototypeOf` 或者 `Object.getPrototypeOf()` 方法。非标准属性意味着未来可能直接会修改或者移除该属性，说不定以后出了个新标准用 `Symbol.proto` 作为 key 来访问对象的原型，那这个非标准属性可能就要被移除了。\n\n```js\nconsole.log({}.__proto__ === Object.getPrototypeOf({})); // => true\n```\n\n### 构造器和 prototype\n\n构造器的英文就是 `constructor`，在 JavaScript 中，**函数都可以用作构造器**。构造器我们也可以称之为类，Student 构造器不就可以称之为 Student 类嘛。我们可以通过 new 构造器来构造一个实例。\n\n```js\nfunction Apple() {}\nconst apple = new Apple();\nconsole.log(apple instanceof Apple); // => true\n// 实例的原型即 apple1.__proto__\nconsole.log(apple1.__proto__ === Apple.prototype); // => true\nconsole.log(apple2.__proto__ === Apple.prototype); // => true\n```\n\n**任何构造器都有一个 prototype 属性，默认是一个空的纯对象，所有由构造器构造的实例的原型都是指向它**\n\n构造器的 `prototype` 有一个 `constructor` 属性，指向构造器本身：\n\n```js\nconsole.log(Apple.prototype.constructor === Apple); // => true\n```\n\n`__proto__` ，`prototype`，`constructor`，`Apple`函数，实例 `apple` 和原型对象`[[prototype]]` 之间的关系：\n\n![原型和原型对象的关系](0.png)\n\n\n`__proto__` 存在于所有的对象上，`prototype` 存在于所有的函数上，他俩的关系就是：函数的`prototype` 是所有使用 new 这个函数构造的实例的 `__proto__`。函数也是对象，所以函数同时有 `__proto__` 和`prototype`。\n\n### 原型链\n\n当在一个对象 obj 上访问某个属性时，如果不存在于 obj，那么便会去对象的原型也就是`obj.__proto__` 上去找这个属性。如果有则返回这个属性，没有则去对象 obj 的原型的原型也就是 `obj.__proto__.__proto__`去找，重复以上步骤。一直到访问**纯对象**的原型也就是`Object.prototype`，没有的话续往上找也就是 `Object.prototype.__proto__`，其实就是 null，直接返回 undefined。\n\n```js\nfunction Student(name, grade) {\n  this.name = name;\n  this.grade = grade;\n}\n\nconst stu = new Student();\nconsole.log(stu.notExists); // => undefined\n```\n\n访问 `stu.notExists` 的整个过程是：\n\n1. 先看 `stu` 上是否存在 `notExists`，不存在，所以看 `stu.__proto__`\n2. `stu.__proto__` 上也不存在 `notExists` 属性，再看 `stu.__proto__.__proto__`，其实就是**纯对象**的原型：`Object.prototype`\n3. **纯对象**的原型上也不存在 `notExists` 属性，再往上，到`stu.__proto__.__proto__.__proto__` 上去找，其实就是 null\n4. null 不存在 `notExists` 属性，返回 undefined\n\n可能看了上面会有疑问，对象的原型一直查找最后会找到**纯对象**的原型？测试一下就知道了：proto__.__proto__ === {}.__proto__); // => true\n```\n\n**纯对象**的原型的原型是 null：\n\n​```\nconsole.log(new Object().__proto__.__proto__); // => null\n```\n\n各个原型之间构成的链，我们称之为原型链。\n\n![原型链](1.png)\n\n函数 `Student` 的原型链应该是怎样的？\n\n![student原型链](2.png)\n\n\n\n# GET、POST是什么？HTTP是什么？\n\n**GET和POST**是HTTP协议中的两种发送请求的方法。\n\n**HTTP**是基于TCP/IP的关于数据如何在万维网中如何通信的协议。\n\n- GET在浏览器回退时是无害的，而POST会再次提交请求。\n- GET产生的URL地址可以被Bookmark，而POST不可以。\n- GET请求会被浏览器主动cache，而POST不会，除非手动设置。\n- GET请求只能进行url编码，而POST支持多种编码方式。\n- GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。\n- GET请求在URL中传送的参数是有长度限制的，而POST没有。\n- 对参数的数据类型，GET只接受ASCII字符，而POST没有限制。\n- GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。\n- GET参数通过URL传递，POST放在Request body中。\n- GET产生一个TCP数据包；POST产生两个TCP数据包。在网络差的情况下，两次包的TCP在验证数据包的完整性上有很大优势；并不是所有浏览器发送POST请求都会发送两次，Firefox就是发送一次；\n\n\n\n# 请你讲一下对于JS中模块的理解，Commonjs、 AMD和CMD分别有什么特点？\n\n### 1.什么是模块\n\n- 将复杂的程序依据一定的规则(规范)拆分成多个模块(文件)\n- 模块的内部数据与实现是私有的, 只是向外部暴露一些接口(方法)与外部其它模块通信\n\n### 2.好处\n\n模块化开发方便代码的管理，提高代码复用性，降低代码耦合，每个模块都会有自己的作用域，防止变量污染。\n\n### 3.Commonjs、 AMD和CMD分别有什么特点？\n\n- **CommonJS 模块输出的是一个值的拷贝，CommonJS 模块是运行时加载**，CommonJS规范主要用于服务端编程，**加载模块是同步的**，同步意味着阻塞加载，浏览器资源是异步加载的，因此有了AMD、CMD解决方案。\n- AMD 是 `RequireJS` 在推广过程中对模块定义的规范化产出。AMD规范在浏览器环境中**异步加载模块**，而且可以并行加载多个模块。AMD 的 API 默认是**一个当多个用**，对于依赖的模块，**AMD 推崇提前执行(依赖前置)**\n- CMD 是 `SeaJS` 在推广过程中对模块定义的规范化产出。CMD 的 API 严格区分，职责单一**，**加载模块是异步的，CMD 推崇延迟执行（依赖就近）。**\n- **ES6 模块输出的是值的引用，ES6 模块是编译时输出接口**，ES6 在语言标准的层面上，实现了模块功能简单，完全可以成为浏览器和服务器通用的模块解决方案。\n\n\n\n# 什么是闭包？\n\n### 闭包是一个有权访问其他函数作用域内的变量的函数。\n\n由于在JS中，变量的作用域属于函数的作用域。函数在执行完之后，作用域会被销毁，内存也随之回收。但是闭包是创建在一个函数内部的子函数，由于其能访问上级作用域的原因，上级函数执行完之后作用域不会被销毁，此时子函数——也就是闭包，它拥有访问上级作用域的变量的权限，即使上级函数执行完之后作用域的变量也不会被销毁。\n\n### 闭包解决了什么？\n\n由于闭包可以缓存上级作用域，这使得外部函数打破“函数作用域”的束缚，可以访问函数内部的变量。这里以日常使用的Ajax成功回调为例，这个回调也是一个闭包，回调函数拥有对整个上级作用域的访问和操作能力，这样提供了较大的便利。开发者不需要再去写钩子函数去操作上级函数作用域内的变量了。\n\n### 闭包有哪些应用场景?\n\n闭包随处可见，一个Ajax请求的成功回调，一个事件绑定的回调方法，一个setTimeout的延时回调，或者一个函数内部返回另一个匿名函数，这些都是闭包。简而言之，无论使用何种方式对函数类型的值进行传递，当函数在别处被调用时都有闭包的身影。\n\n\n\n\n\n\n箭头函数的this指向 \n\n行内和块级元素的区别\n\n行内元素如何设置宽高\n\nFlex：1什么意思\n","source":"_posts/JS-practice.md","raw":"---\ntitle: JS面试题总结\ncover: true\nimg: 'http://pc.lzlstudy.top/img/banner/0.jpg'\ntop: false\n# toc: true\n# mathjax: true\ndate: 2021-01-10 10:09:23\n# password:\nsummary: 本文为个人准备前端面试过程中的学习笔记。\ntags:\n- JavaScript面试题\n- 春招\ncategories:\n- 前端面试题\n---\n\n\n# 数据类型\n\n1.基本数据类型：String Number Boolean Undefined Null Symbol BigInt\n\n2.引用数据类型：Object Array Date Function\n\n\n\n# 判断数组和对象的方法\n\n1.typeof除了array和null判断为object外，其他的都可以正常判断\n\n2.参数 instanceof Array|Object\n\n```\nvar arr = [1,2,3,1];\nalert(arr instanceof Array); // true\n```\n\n3.对象的constructor属性 \n\n```\nvar arr = [1,2,3,1];\nalert(arr.constructor === Array); // true \n```\n\n以上两种方法看似完美，其实还有bug。由于每个iframe都有一套自己的执行环境，跨frame实例化的对象彼此是不共享原型链的，因此导致上述检测代码失效\n\n4.判断是否为数组 Array.isArray(参数) 是则返回true\n\n5.Obejct.protoType.toString.call(参数)\n\n```\nvar arr = [1,2,3,1];\nvar arr2 = [{ abac : 1, abc : 2 }];\nfunction isArrayFn(value){\nif (typeof Array.isArray === \"function\") {\nreturn Array.isArray(value);\n}else{\nreturn Object.prototype.toString.call(value) === \"[object Array]\";\n}\n}\nalert(isArrayFn(arr));// true\nalert(isArrayFn(arr2));// true\n```\n\n\n\n# 深拷贝和浅拷贝的区别?\n\n**浅拷贝:**将内存中的某个对象复制一份,在内存中开辟一块新的空间,如果复制的这个对象的属性为基本数据类型         ,则拷贝的便为这个值本身,如果为复杂数据类型,则拷贝复制的为地址,因此,修改新对象会对原对象产生影响\n\n**深拷贝:**开辟一块新的空间,完整的复制一份,包括复杂数据类型,拷贝的这个对象和原对象无任何关系,修改什么 的都互不影响\n\n```\nfunction deepClone(obj) {\n\tif (obj === null) return null; //null 的情况\n\tif (obj instanceof RegExp) return new RegExp(obj); //正则表达式的情况\n    if (obj instanceof Date) return new Date(obj); //日期对象的情况\n    if (typeof obj != \"object\") {\n    \t//非复杂类型,直接返回 也是结束递归的条件\n   \t\treturn obj\n    }\n    //[].__proto__.constructor=Array()\n    //{}.__proto__.constructor=Object()\n    //因此处理数组的情况时,可以取巧用这个办法来new新对象\n    var newObj = new Object.getPrototypeOf(obj).constructor;\n\tfor (var key in obj) {\n\t\tnewObj[key] = deepClone(obj[key])\n\t}\n\treturn newObj;\n}\n```\n\n\n\n# typeof 和 instanceof的区别?   \n\n**typeof**可以判断出基本数据类型Number|String|Boolean|Undefined|Symbol|BigInt(除了null),还可以正确判断出某个对象是否为function,其余的Date,Array等无法判断 ;**instanceof**相反,可以准确判断出复杂数据类型,但是无法判断简单数据类型.\n\n**instanceof**的原理：\n\n[对象] instanceof [构造函数]\n\n只要右边变量的 prototype 在左边变量的原型链上即可。因此，instanceof 在查找的过程中会遍历左边变量的原型链，直到找到右边变量的 prototype，如果查找失败，则会返回 false\n\n\n\n# JavaScript 原型\n\n原型的英文应该叫做 `prototype`，任何一个对象都有原型，我们可以通过非标准属性 `__proto__`来访问一个对象的原型：\n\n```\n// 纯对象的原型默认是个空对象\nconsole.log({}.__proto__); // => {}\n\nfunction Student(name, grade) {\n  this.name = name;\n  this.grade = grade;\n}\n\nconst stu = new Student('xiaoMing', 6);\n// Student 类型实例的原型，默认也是一个空对象\nconsole.log(stu.__proto__); // => Student {}\n```\n\n`__proto__` 是非标准属性，如果要访问一个对象的原型，建议使用 ES6 新增的`Reflect.getPrototypeOf` 或者 `Object.getPrototypeOf()` 方法。非标准属性意味着未来可能直接会修改或者移除该属性，说不定以后出了个新标准用 `Symbol.proto` 作为 key 来访问对象的原型，那这个非标准属性可能就要被移除了。\n\n```js\nconsole.log({}.__proto__ === Object.getPrototypeOf({})); // => true\n```\n\n### 构造器和 prototype\n\n构造器的英文就是 `constructor`，在 JavaScript 中，**函数都可以用作构造器**。构造器我们也可以称之为类，Student 构造器不就可以称之为 Student 类嘛。我们可以通过 new 构造器来构造一个实例。\n\n```js\nfunction Apple() {}\nconst apple = new Apple();\nconsole.log(apple instanceof Apple); // => true\n// 实例的原型即 apple1.__proto__\nconsole.log(apple1.__proto__ === Apple.prototype); // => true\nconsole.log(apple2.__proto__ === Apple.prototype); // => true\n```\n\n**任何构造器都有一个 prototype 属性，默认是一个空的纯对象，所有由构造器构造的实例的原型都是指向它**\n\n构造器的 `prototype` 有一个 `constructor` 属性，指向构造器本身：\n\n```js\nconsole.log(Apple.prototype.constructor === Apple); // => true\n```\n\n`__proto__` ，`prototype`，`constructor`，`Apple`函数，实例 `apple` 和原型对象`[[prototype]]` 之间的关系：\n\n![原型和原型对象的关系](0.png)\n\n\n`__proto__` 存在于所有的对象上，`prototype` 存在于所有的函数上，他俩的关系就是：函数的`prototype` 是所有使用 new 这个函数构造的实例的 `__proto__`。函数也是对象，所以函数同时有 `__proto__` 和`prototype`。\n\n### 原型链\n\n当在一个对象 obj 上访问某个属性时，如果不存在于 obj，那么便会去对象的原型也就是`obj.__proto__` 上去找这个属性。如果有则返回这个属性，没有则去对象 obj 的原型的原型也就是 `obj.__proto__.__proto__`去找，重复以上步骤。一直到访问**纯对象**的原型也就是`Object.prototype`，没有的话续往上找也就是 `Object.prototype.__proto__`，其实就是 null，直接返回 undefined。\n\n```js\nfunction Student(name, grade) {\n  this.name = name;\n  this.grade = grade;\n}\n\nconst stu = new Student();\nconsole.log(stu.notExists); // => undefined\n```\n\n访问 `stu.notExists` 的整个过程是：\n\n1. 先看 `stu` 上是否存在 `notExists`，不存在，所以看 `stu.__proto__`\n2. `stu.__proto__` 上也不存在 `notExists` 属性，再看 `stu.__proto__.__proto__`，其实就是**纯对象**的原型：`Object.prototype`\n3. **纯对象**的原型上也不存在 `notExists` 属性，再往上，到`stu.__proto__.__proto__.__proto__` 上去找，其实就是 null\n4. null 不存在 `notExists` 属性，返回 undefined\n\n可能看了上面会有疑问，对象的原型一直查找最后会找到**纯对象**的原型？测试一下就知道了：proto__.__proto__ === {}.__proto__); // => true\n```\n\n**纯对象**的原型的原型是 null：\n\n​```\nconsole.log(new Object().__proto__.__proto__); // => null\n```\n\n各个原型之间构成的链，我们称之为原型链。\n\n![原型链](1.png)\n\n函数 `Student` 的原型链应该是怎样的？\n\n![student原型链](2.png)\n\n\n\n# GET、POST是什么？HTTP是什么？\n\n**GET和POST**是HTTP协议中的两种发送请求的方法。\n\n**HTTP**是基于TCP/IP的关于数据如何在万维网中如何通信的协议。\n\n- GET在浏览器回退时是无害的，而POST会再次提交请求。\n- GET产生的URL地址可以被Bookmark，而POST不可以。\n- GET请求会被浏览器主动cache，而POST不会，除非手动设置。\n- GET请求只能进行url编码，而POST支持多种编码方式。\n- GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。\n- GET请求在URL中传送的参数是有长度限制的，而POST没有。\n- 对参数的数据类型，GET只接受ASCII字符，而POST没有限制。\n- GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。\n- GET参数通过URL传递，POST放在Request body中。\n- GET产生一个TCP数据包；POST产生两个TCP数据包。在网络差的情况下，两次包的TCP在验证数据包的完整性上有很大优势；并不是所有浏览器发送POST请求都会发送两次，Firefox就是发送一次；\n\n\n\n# 请你讲一下对于JS中模块的理解，Commonjs、 AMD和CMD分别有什么特点？\n\n### 1.什么是模块\n\n- 将复杂的程序依据一定的规则(规范)拆分成多个模块(文件)\n- 模块的内部数据与实现是私有的, 只是向外部暴露一些接口(方法)与外部其它模块通信\n\n### 2.好处\n\n模块化开发方便代码的管理，提高代码复用性，降低代码耦合，每个模块都会有自己的作用域，防止变量污染。\n\n### 3.Commonjs、 AMD和CMD分别有什么特点？\n\n- **CommonJS 模块输出的是一个值的拷贝，CommonJS 模块是运行时加载**，CommonJS规范主要用于服务端编程，**加载模块是同步的**，同步意味着阻塞加载，浏览器资源是异步加载的，因此有了AMD、CMD解决方案。\n- AMD 是 `RequireJS` 在推广过程中对模块定义的规范化产出。AMD规范在浏览器环境中**异步加载模块**，而且可以并行加载多个模块。AMD 的 API 默认是**一个当多个用**，对于依赖的模块，**AMD 推崇提前执行(依赖前置)**\n- CMD 是 `SeaJS` 在推广过程中对模块定义的规范化产出。CMD 的 API 严格区分，职责单一**，**加载模块是异步的，CMD 推崇延迟执行（依赖就近）。**\n- **ES6 模块输出的是值的引用，ES6 模块是编译时输出接口**，ES6 在语言标准的层面上，实现了模块功能简单，完全可以成为浏览器和服务器通用的模块解决方案。\n\n\n\n# 什么是闭包？\n\n### 闭包是一个有权访问其他函数作用域内的变量的函数。\n\n由于在JS中，变量的作用域属于函数的作用域。函数在执行完之后，作用域会被销毁，内存也随之回收。但是闭包是创建在一个函数内部的子函数，由于其能访问上级作用域的原因，上级函数执行完之后作用域不会被销毁，此时子函数——也就是闭包，它拥有访问上级作用域的变量的权限，即使上级函数执行完之后作用域的变量也不会被销毁。\n\n### 闭包解决了什么？\n\n由于闭包可以缓存上级作用域，这使得外部函数打破“函数作用域”的束缚，可以访问函数内部的变量。这里以日常使用的Ajax成功回调为例，这个回调也是一个闭包，回调函数拥有对整个上级作用域的访问和操作能力，这样提供了较大的便利。开发者不需要再去写钩子函数去操作上级函数作用域内的变量了。\n\n### 闭包有哪些应用场景?\n\n闭包随处可见，一个Ajax请求的成功回调，一个事件绑定的回调方法，一个setTimeout的延时回调，或者一个函数内部返回另一个匿名函数，这些都是闭包。简而言之，无论使用何种方式对函数类型的值进行传递，当函数在别处被调用时都有闭包的身影。\n\n\n\n\n\n\n箭头函数的this指向 \n\n行内和块级元素的区别\n\n行内元素如何设置宽高\n\nFlex：1什么意思\n","slug":"JS-practice","published":1,"updated":"2021-01-13T15:18:12.422Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjzdt5me000180w17xcv793f","content":"<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><p>1.基本数据类型：String Number Boolean Undefined Null Symbol BigInt</p>\n<p>2.引用数据类型：Object Array Date Function</p>\n<h1 id=\"判断数组和对象的方法\"><a href=\"#判断数组和对象的方法\" class=\"headerlink\" title=\"判断数组和对象的方法\"></a>判断数组和对象的方法</h1><p>1.typeof除了array和null判断为object外，其他的都可以正常判断</p>\n<p>2.参数 instanceof Array|Object</p>\n<pre><code>var arr = [1,2,3,1];\nalert(arr instanceof Array); // true</code></pre><p>3.对象的constructor属性 </p>\n<pre><code>var arr = [1,2,3,1];\nalert(arr.constructor === Array); // true </code></pre><p>以上两种方法看似完美，其实还有bug。由于每个iframe都有一套自己的执行环境，跨frame实例化的对象彼此是不共享原型链的，因此导致上述检测代码失效</p>\n<p>4.判断是否为数组 Array.isArray(参数) 是则返回true</p>\n<p>5.Obejct.protoType.toString.call(参数)</p>\n<pre><code>var arr = [1,2,3,1];\nvar arr2 = [&#123; abac : 1, abc : 2 &#125;];\nfunction isArrayFn(value)&#123;\nif (typeof Array.isArray === &quot;function&quot;) &#123;\nreturn Array.isArray(value);\n&#125;else&#123;\nreturn Object.prototype.toString.call(value) === &quot;[object Array]&quot;;\n&#125;\n&#125;\nalert(isArrayFn(arr));// true\nalert(isArrayFn(arr2));// true</code></pre><h1 id=\"深拷贝和浅拷贝的区别\"><a href=\"#深拷贝和浅拷贝的区别\" class=\"headerlink\" title=\"深拷贝和浅拷贝的区别?\"></a>深拷贝和浅拷贝的区别?</h1><p><strong>浅拷贝:</strong>将内存中的某个对象复制一份,在内存中开辟一块新的空间,如果复制的这个对象的属性为基本数据类型         ,则拷贝的便为这个值本身,如果为复杂数据类型,则拷贝复制的为地址,因此,修改新对象会对原对象产生影响</p>\n<p><strong>深拷贝:</strong>开辟一块新的空间,完整的复制一份,包括复杂数据类型,拷贝的这个对象和原对象无任何关系,修改什么 的都互不影响</p>\n<pre><code>function deepClone(obj) &#123;\n    if (obj === null) return null; //null 的情况\n    if (obj instanceof RegExp) return new RegExp(obj); //正则表达式的情况\n    if (obj instanceof Date) return new Date(obj); //日期对象的情况\n    if (typeof obj != &quot;object&quot;) &#123;\n        //非复杂类型,直接返回 也是结束递归的条件\n           return obj\n    &#125;\n    //[].__proto__.constructor=Array()\n    //&#123;&#125;.__proto__.constructor=Object()\n    //因此处理数组的情况时,可以取巧用这个办法来new新对象\n    var newObj = new Object.getPrototypeOf(obj).constructor;\n    for (var key in obj) &#123;\n        newObj[key] = deepClone(obj[key])\n    &#125;\n    return newObj;\n&#125;</code></pre><h1 id=\"typeof-和-instanceof的区别\"><a href=\"#typeof-和-instanceof的区别\" class=\"headerlink\" title=\"typeof 和 instanceof的区别?\"></a>typeof 和 instanceof的区别?</h1><p><strong>typeof</strong>可以判断出基本数据类型Number|String|Boolean|Undefined|Symbol|BigInt(除了null),还可以正确判断出某个对象是否为function,其余的Date,Array等无法判断 ;<strong>instanceof</strong>相反,可以准确判断出复杂数据类型,但是无法判断简单数据类型.</p>\n<p><strong>instanceof</strong>的原理：</p>\n<p>[对象] instanceof [构造函数]</p>\n<p>只要右边变量的 prototype 在左边变量的原型链上即可。因此，instanceof 在查找的过程中会遍历左边变量的原型链，直到找到右边变量的 prototype，如果查找失败，则会返回 false</p>\n<h1 id=\"JavaScript-原型\"><a href=\"#JavaScript-原型\" class=\"headerlink\" title=\"JavaScript 原型\"></a>JavaScript 原型</h1><p>原型的英文应该叫做 <code>prototype</code>，任何一个对象都有原型，我们可以通过非标准属性 <code>__proto__</code>来访问一个对象的原型：</p>\n<pre><code>// 纯对象的原型默认是个空对象\nconsole.log(&#123;&#125;.__proto__); // =&gt; &#123;&#125;\n\nfunction Student(name, grade) &#123;\n  this.name = name;\n  this.grade = grade;\n&#125;\n\nconst stu = new Student(&#39;xiaoMing&#39;, 6);\n// Student 类型实例的原型，默认也是一个空对象\nconsole.log(stu.__proto__); // =&gt; Student &#123;&#125;</code></pre><p><code>__proto__</code> 是非标准属性，如果要访问一个对象的原型，建议使用 ES6 新增的<code>Reflect.getPrototypeOf</code> 或者 <code>Object.getPrototypeOf()</code> 方法。非标准属性意味着未来可能直接会修改或者移除该属性，说不定以后出了个新标准用 <code>Symbol.proto</code> 作为 key 来访问对象的原型，那这个非标准属性可能就要被移除了。</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// => true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"构造器和-prototype\"><a href=\"#构造器和-prototype\" class=\"headerlink\" title=\"构造器和 prototype\"></a>构造器和 prototype</h3><p>构造器的英文就是 <code>constructor</code>，在 JavaScript 中，<strong>函数都可以用作构造器</strong>。构造器我们也可以称之为类，Student 构造器不就可以称之为 Student 类嘛。我们可以通过 new 构造器来构造一个实例。</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Apple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> apple <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Apple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>apple <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Apple</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// => true</span>\n<span class=\"token comment\" spellcheck=\"true\">// 实例的原型即 apple1.__proto__</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>apple1<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> Apple<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// => true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>apple2<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> Apple<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// => true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>任何构造器都有一个 prototype 属性，默认是一个空的纯对象，所有由构造器构造的实例的原型都是指向它</strong></p>\n<p>构造器的 <code>prototype</code> 有一个 <code>constructor</code> 属性，指向构造器本身：</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Apple<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Apple<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// => true</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><code>__proto__</code> ，<code>prototype</code>，<code>constructor</code>，<code>Apple</code>函数，实例 <code>apple</code> 和原型对象<code>[[prototype]]</code> 之间的关系：</p>\n<p><img src=\"0.png\" alt=\"原型和原型对象的关系\"></p>\n<p><code>__proto__</code> 存在于所有的对象上，<code>prototype</code> 存在于所有的函数上，他俩的关系就是：函数的<code>prototype</code> 是所有使用 new 这个函数构造的实例的 <code>__proto__</code>。函数也是对象，所以函数同时有 <code>__proto__</code> 和<code>prototype</code>。</p>\n<h3 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h3><p>当在一个对象 obj 上访问某个属性时，如果不存在于 obj，那么便会去对象的原型也就是<code>obj.__proto__</code> 上去找这个属性。如果有则返回这个属性，没有则去对象 obj 的原型的原型也就是 <code>obj.__proto__.__proto__</code>去找，重复以上步骤。一直到访问<strong>纯对象</strong>的原型也就是<code>Object.prototype</code>，没有的话续往上找也就是 <code>Object.prototype.__proto__</code>，其实就是 null，直接返回 undefined。</p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Student</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> grade<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>grade <span class=\"token operator\">=</span> grade<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> stu <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">.</span>notExists<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// => undefined</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>访问 <code>stu.notExists</code> 的整个过程是：</p>\n<ol>\n<li>先看 <code>stu</code> 上是否存在 <code>notExists</code>，不存在，所以看 <code>stu.__proto__</code></li>\n<li><code>stu.__proto__</code> 上也不存在 <code>notExists</code> 属性，再看 <code>stu.__proto__.__proto__</code>，其实就是<strong>纯对象</strong>的原型：<code>Object.prototype</code></li>\n<li><strong>纯对象</strong>的原型上也不存在 <code>notExists</code> 属性，再往上，到<code>stu.__proto__.__proto__.__proto__</code> 上去找，其实就是 null</li>\n<li>null 不存在 <code>notExists</code> 属性，返回 undefined</li>\n</ol>\n<p>可能看了上面会有疑问，对象的原型一直查找最后会找到<strong>纯对象</strong>的原型？测试一下就知道了：proto__.<strong>proto</strong> === {}.<strong>proto</strong>); // =&gt; true</p>\n<pre><code>\n**纯对象**的原型的原型是 null：\n\n​```\nconsole.log(new Object().__proto__.__proto__); // =&gt; null</code></pre><p>各个原型之间构成的链，我们称之为原型链。</p>\n<p><img src=\"1.png\" alt=\"原型链\"></p>\n<p>函数 <code>Student</code> 的原型链应该是怎样的？</p>\n<p><img src=\"2.png\" alt=\"student原型链\"></p>\n<h1 id=\"GET、POST是什么？HTTP是什么？\"><a href=\"#GET、POST是什么？HTTP是什么？\" class=\"headerlink\" title=\"GET、POST是什么？HTTP是什么？\"></a>GET、POST是什么？HTTP是什么？</h1><p><strong>GET和POST</strong>是HTTP协议中的两种发送请求的方法。</p>\n<p><strong>HTTP</strong>是基于TCP/IP的关于数据如何在万维网中如何通信的协议。</p>\n<ul>\n<li>GET在浏览器回退时是无害的，而POST会再次提交请求。</li>\n<li>GET产生的URL地址可以被Bookmark，而POST不可以。</li>\n<li>GET请求会被浏览器主动cache，而POST不会，除非手动设置。</li>\n<li>GET请求只能进行url编码，而POST支持多种编码方式。</li>\n<li>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</li>\n<li>GET请求在URL中传送的参数是有长度限制的，而POST没有。</li>\n<li>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。</li>\n<li>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</li>\n<li>GET参数通过URL传递，POST放在Request body中。</li>\n<li>GET产生一个TCP数据包；POST产生两个TCP数据包。在网络差的情况下，两次包的TCP在验证数据包的完整性上有很大优势；并不是所有浏览器发送POST请求都会发送两次，Firefox就是发送一次；</li>\n</ul>\n<h1 id=\"请你讲一下对于JS中模块的理解，Commonjs、-AMD和CMD分别有什么特点？\"><a href=\"#请你讲一下对于JS中模块的理解，Commonjs、-AMD和CMD分别有什么特点？\" class=\"headerlink\" title=\"请你讲一下对于JS中模块的理解，Commonjs、 AMD和CMD分别有什么特点？\"></a>请你讲一下对于JS中模块的理解，Commonjs、 AMD和CMD分别有什么特点？</h1><h3 id=\"1-什么是模块\"><a href=\"#1-什么是模块\" class=\"headerlink\" title=\"1.什么是模块\"></a>1.什么是模块</h3><ul>\n<li>将复杂的程序依据一定的规则(规范)拆分成多个模块(文件)</li>\n<li>模块的内部数据与实现是私有的, 只是向外部暴露一些接口(方法)与外部其它模块通信</li>\n</ul>\n<h3 id=\"2-好处\"><a href=\"#2-好处\" class=\"headerlink\" title=\"2.好处\"></a>2.好处</h3><p>模块化开发方便代码的管理，提高代码复用性，降低代码耦合，每个模块都会有自己的作用域，防止变量污染。</p>\n<h3 id=\"3-Commonjs、-AMD和CMD分别有什么特点？\"><a href=\"#3-Commonjs、-AMD和CMD分别有什么特点？\" class=\"headerlink\" title=\"3.Commonjs、 AMD和CMD分别有什么特点？\"></a>3.Commonjs、 AMD和CMD分别有什么特点？</h3><ul>\n<li><strong>CommonJS 模块输出的是一个值的拷贝，CommonJS 模块是运行时加载</strong>，CommonJS规范主要用于服务端编程，<strong>加载模块是同步的</strong>，同步意味着阻塞加载，浏览器资源是异步加载的，因此有了AMD、CMD解决方案。</li>\n<li>AMD 是 <code>RequireJS</code> 在推广过程中对模块定义的规范化产出。AMD规范在浏览器环境中<strong>异步加载模块</strong>，而且可以并行加载多个模块。AMD 的 API 默认是<strong>一个当多个用</strong>，对于依赖的模块，<strong>AMD 推崇提前执行(依赖前置)</strong></li>\n<li>CMD 是 <code>SeaJS</code> 在推广过程中对模块定义的规范化产出。CMD 的 API 严格区分，职责单一<strong>，</strong>加载模块是异步的，CMD 推崇延迟执行（依赖就近）。**</li>\n<li><strong>ES6 模块输出的是值的引用，ES6 模块是编译时输出接口</strong>，ES6 在语言标准的层面上，实现了模块功能简单，完全可以成为浏览器和服务器通用的模块解决方案。</li>\n</ul>\n<h1 id=\"什么是闭包？\"><a href=\"#什么是闭包？\" class=\"headerlink\" title=\"什么是闭包？\"></a>什么是闭包？</h1><h3 id=\"闭包是一个有权访问其他函数作用域内的变量的函数。\"><a href=\"#闭包是一个有权访问其他函数作用域内的变量的函数。\" class=\"headerlink\" title=\"闭包是一个有权访问其他函数作用域内的变量的函数。\"></a>闭包是一个有权访问其他函数作用域内的变量的函数。</h3><p>由于在JS中，变量的作用域属于函数的作用域。函数在执行完之后，作用域会被销毁，内存也随之回收。但是闭包是创建在一个函数内部的子函数，由于其能访问上级作用域的原因，上级函数执行完之后作用域不会被销毁，此时子函数——也就是闭包，它拥有访问上级作用域的变量的权限，即使上级函数执行完之后作用域的变量也不会被销毁。</p>\n<h3 id=\"闭包解决了什么？\"><a href=\"#闭包解决了什么？\" class=\"headerlink\" title=\"闭包解决了什么？\"></a>闭包解决了什么？</h3><p>由于闭包可以缓存上级作用域，这使得外部函数打破“函数作用域”的束缚，可以访问函数内部的变量。这里以日常使用的Ajax成功回调为例，这个回调也是一个闭包，回调函数拥有对整个上级作用域的访问和操作能力，这样提供了较大的便利。开发者不需要再去写钩子函数去操作上级函数作用域内的变量了。</p>\n<h3 id=\"闭包有哪些应用场景\"><a href=\"#闭包有哪些应用场景\" class=\"headerlink\" title=\"闭包有哪些应用场景?\"></a>闭包有哪些应用场景?</h3><p>闭包随处可见，一个Ajax请求的成功回调，一个事件绑定的回调方法，一个setTimeout的延时回调，或者一个函数内部返回另一个匿名函数，这些都是闭包。简而言之，无论使用何种方式对函数类型的值进行传递，当函数在别处被调用时都有闭包的身影。</p>\n<p>箭头函数的this指向 </p>\n<p>行内和块级元素的区别</p>\n<p>行内元素如何设置宽高</p>\n<p>Flex：1什么意思</p>\n","site":{"data":{"banner":[{"name":"0.jpg"},{"name":"1.jpg"},{"name":"6.jpg"},{"name":"3.jpg"},{"name":"4.jpg"},{"name":"5.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h1 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h1><p>1.基本数据类型：String Number Boolean Undefined Null Symbol BigInt</p>\n<p>2.引用数据类型：Object Array Date Function</p>\n<h1 id=\"判断数组和对象的方法\"><a href=\"#判断数组和对象的方法\" class=\"headerlink\" title=\"判断数组和对象的方法\"></a>判断数组和对象的方法</h1><p>1.typeof除了array和null判断为object外，其他的都可以正常判断</p>\n<p>2.参数 instanceof Array|Object</p>\n<pre><code>var arr = [1,2,3,1];\nalert(arr instanceof Array); // true</code></pre><p>3.对象的constructor属性 </p>\n<pre><code>var arr = [1,2,3,1];\nalert(arr.constructor === Array); // true </code></pre><p>以上两种方法看似完美，其实还有bug。由于每个iframe都有一套自己的执行环境，跨frame实例化的对象彼此是不共享原型链的，因此导致上述检测代码失效</p>\n<p>4.判断是否为数组 Array.isArray(参数) 是则返回true</p>\n<p>5.Obejct.protoType.toString.call(参数)</p>\n<pre><code>var arr = [1,2,3,1];\nvar arr2 = [&#123; abac : 1, abc : 2 &#125;];\nfunction isArrayFn(value)&#123;\nif (typeof Array.isArray === &quot;function&quot;) &#123;\nreturn Array.isArray(value);\n&#125;else&#123;\nreturn Object.prototype.toString.call(value) === &quot;[object Array]&quot;;\n&#125;\n&#125;\nalert(isArrayFn(arr));// true\nalert(isArrayFn(arr2));// true</code></pre><h1 id=\"深拷贝和浅拷贝的区别\"><a href=\"#深拷贝和浅拷贝的区别\" class=\"headerlink\" title=\"深拷贝和浅拷贝的区别?\"></a>深拷贝和浅拷贝的区别?</h1><p><strong>浅拷贝:</strong>将内存中的某个对象复制一份,在内存中开辟一块新的空间,如果复制的这个对象的属性为基本数据类型         ,则拷贝的便为这个值本身,如果为复杂数据类型,则拷贝复制的为地址,因此,修改新对象会对原对象产生影响</p>\n<p><strong>深拷贝:</strong>开辟一块新的空间,完整的复制一份,包括复杂数据类型,拷贝的这个对象和原对象无任何关系,修改什么 的都互不影响</p>\n<pre><code>function deepClone(obj) &#123;\n    if (obj === null) return null; //null 的情况\n    if (obj instanceof RegExp) return new RegExp(obj); //正则表达式的情况\n    if (obj instanceof Date) return new Date(obj); //日期对象的情况\n    if (typeof obj != &quot;object&quot;) &#123;\n        //非复杂类型,直接返回 也是结束递归的条件\n           return obj\n    &#125;\n    //[].__proto__.constructor=Array()\n    //&#123;&#125;.__proto__.constructor=Object()\n    //因此处理数组的情况时,可以取巧用这个办法来new新对象\n    var newObj = new Object.getPrototypeOf(obj).constructor;\n    for (var key in obj) &#123;\n        newObj[key] = deepClone(obj[key])\n    &#125;\n    return newObj;\n&#125;</code></pre><h1 id=\"typeof-和-instanceof的区别\"><a href=\"#typeof-和-instanceof的区别\" class=\"headerlink\" title=\"typeof 和 instanceof的区别?\"></a>typeof 和 instanceof的区别?</h1><p><strong>typeof</strong>可以判断出基本数据类型Number|String|Boolean|Undefined|Symbol|BigInt(除了null),还可以正确判断出某个对象是否为function,其余的Date,Array等无法判断 ;<strong>instanceof</strong>相反,可以准确判断出复杂数据类型,但是无法判断简单数据类型.</p>\n<p><strong>instanceof</strong>的原理：</p>\n<p>[对象] instanceof [构造函数]</p>\n<p>只要右边变量的 prototype 在左边变量的原型链上即可。因此，instanceof 在查找的过程中会遍历左边变量的原型链，直到找到右边变量的 prototype，如果查找失败，则会返回 false</p>\n<h1 id=\"JavaScript-原型\"><a href=\"#JavaScript-原型\" class=\"headerlink\" title=\"JavaScript 原型\"></a>JavaScript 原型</h1><p>原型的英文应该叫做 <code>prototype</code>，任何一个对象都有原型，我们可以通过非标准属性 <code>__proto__</code>来访问一个对象的原型：</p>\n<pre><code>// 纯对象的原型默认是个空对象\nconsole.log(&#123;&#125;.__proto__); // =&gt; &#123;&#125;\n\nfunction Student(name, grade) &#123;\n  this.name = name;\n  this.grade = grade;\n&#125;\n\nconst stu = new Student(&#39;xiaoMing&#39;, 6);\n// Student 类型实例的原型，默认也是一个空对象\nconsole.log(stu.__proto__); // =&gt; Student &#123;&#125;</code></pre><p><code>__proto__</code> 是非标准属性，如果要访问一个对象的原型，建议使用 ES6 新增的<code>Reflect.getPrototypeOf</code> 或者 <code>Object.getPrototypeOf()</code> 方法。非标准属性意味着未来可能直接会修改或者移除该属性，说不定以后出了个新标准用 <code>Symbol.proto</code> 作为 key 来访问对象的原型，那这个非标准属性可能就要被移除了。</p>\n<pre><code class=\"js\">console.log(&#123;&#125;.__proto__ === Object.getPrototypeOf(&#123;&#125;)); // =&gt; true</code></pre>\n<h3 id=\"构造器和-prototype\"><a href=\"#构造器和-prototype\" class=\"headerlink\" title=\"构造器和 prototype\"></a>构造器和 prototype</h3><p>构造器的英文就是 <code>constructor</code>，在 JavaScript 中，<strong>函数都可以用作构造器</strong>。构造器我们也可以称之为类，Student 构造器不就可以称之为 Student 类嘛。我们可以通过 new 构造器来构造一个实例。</p>\n<pre><code class=\"js\">function Apple() &#123;&#125;\nconst apple = new Apple();\nconsole.log(apple instanceof Apple); // =&gt; true\n// 实例的原型即 apple1.__proto__\nconsole.log(apple1.__proto__ === Apple.prototype); // =&gt; true\nconsole.log(apple2.__proto__ === Apple.prototype); // =&gt; true</code></pre>\n<p><strong>任何构造器都有一个 prototype 属性，默认是一个空的纯对象，所有由构造器构造的实例的原型都是指向它</strong></p>\n<p>构造器的 <code>prototype</code> 有一个 <code>constructor</code> 属性，指向构造器本身：</p>\n<pre><code class=\"js\">console.log(Apple.prototype.constructor === Apple); // =&gt; true</code></pre>\n<p><code>__proto__</code> ，<code>prototype</code>，<code>constructor</code>，<code>Apple</code>函数，实例 <code>apple</code> 和原型对象<code>[[prototype]]</code> 之间的关系：</p>\n<p><img src=\"0.png\" alt=\"原型和原型对象的关系\"></p>\n<p><code>__proto__</code> 存在于所有的对象上，<code>prototype</code> 存在于所有的函数上，他俩的关系就是：函数的<code>prototype</code> 是所有使用 new 这个函数构造的实例的 <code>__proto__</code>。函数也是对象，所以函数同时有 <code>__proto__</code> 和<code>prototype</code>。</p>\n<h3 id=\"原型链\"><a href=\"#原型链\" class=\"headerlink\" title=\"原型链\"></a>原型链</h3><p>当在一个对象 obj 上访问某个属性时，如果不存在于 obj，那么便会去对象的原型也就是<code>obj.__proto__</code> 上去找这个属性。如果有则返回这个属性，没有则去对象 obj 的原型的原型也就是 <code>obj.__proto__.__proto__</code>去找，重复以上步骤。一直到访问<strong>纯对象</strong>的原型也就是<code>Object.prototype</code>，没有的话续往上找也就是 <code>Object.prototype.__proto__</code>，其实就是 null，直接返回 undefined。</p>\n<pre><code class=\"js\">function Student(name, grade) &#123;\n  this.name = name;\n  this.grade = grade;\n&#125;\n\nconst stu = new Student();\nconsole.log(stu.notExists); // =&gt; undefined</code></pre>\n<p>访问 <code>stu.notExists</code> 的整个过程是：</p>\n<ol>\n<li>先看 <code>stu</code> 上是否存在 <code>notExists</code>，不存在，所以看 <code>stu.__proto__</code></li>\n<li><code>stu.__proto__</code> 上也不存在 <code>notExists</code> 属性，再看 <code>stu.__proto__.__proto__</code>，其实就是<strong>纯对象</strong>的原型：<code>Object.prototype</code></li>\n<li><strong>纯对象</strong>的原型上也不存在 <code>notExists</code> 属性，再往上，到<code>stu.__proto__.__proto__.__proto__</code> 上去找，其实就是 null</li>\n<li>null 不存在 <code>notExists</code> 属性，返回 undefined</li>\n</ol>\n<p>可能看了上面会有疑问，对象的原型一直查找最后会找到<strong>纯对象</strong>的原型？测试一下就知道了：proto__.<strong>proto</strong> === {}.<strong>proto</strong>); // =&gt; true</p>\n<pre><code>\n**纯对象**的原型的原型是 null：\n\n​```\nconsole.log(new Object().__proto__.__proto__); // =&gt; null</code></pre><p>各个原型之间构成的链，我们称之为原型链。</p>\n<p><img src=\"1.png\" alt=\"原型链\"></p>\n<p>函数 <code>Student</code> 的原型链应该是怎样的？</p>\n<p><img src=\"2.png\" alt=\"student原型链\"></p>\n<h1 id=\"GET、POST是什么？HTTP是什么？\"><a href=\"#GET、POST是什么？HTTP是什么？\" class=\"headerlink\" title=\"GET、POST是什么？HTTP是什么？\"></a>GET、POST是什么？HTTP是什么？</h1><p><strong>GET和POST</strong>是HTTP协议中的两种发送请求的方法。</p>\n<p><strong>HTTP</strong>是基于TCP/IP的关于数据如何在万维网中如何通信的协议。</p>\n<ul>\n<li>GET在浏览器回退时是无害的，而POST会再次提交请求。</li>\n<li>GET产生的URL地址可以被Bookmark，而POST不可以。</li>\n<li>GET请求会被浏览器主动cache，而POST不会，除非手动设置。</li>\n<li>GET请求只能进行url编码，而POST支持多种编码方式。</li>\n<li>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</li>\n<li>GET请求在URL中传送的参数是有长度限制的，而POST没有。</li>\n<li>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。</li>\n<li>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</li>\n<li>GET参数通过URL传递，POST放在Request body中。</li>\n<li>GET产生一个TCP数据包；POST产生两个TCP数据包。在网络差的情况下，两次包的TCP在验证数据包的完整性上有很大优势；并不是所有浏览器发送POST请求都会发送两次，Firefox就是发送一次；</li>\n</ul>\n<h1 id=\"请你讲一下对于JS中模块的理解，Commonjs、-AMD和CMD分别有什么特点？\"><a href=\"#请你讲一下对于JS中模块的理解，Commonjs、-AMD和CMD分别有什么特点？\" class=\"headerlink\" title=\"请你讲一下对于JS中模块的理解，Commonjs、 AMD和CMD分别有什么特点？\"></a>请你讲一下对于JS中模块的理解，Commonjs、 AMD和CMD分别有什么特点？</h1><h3 id=\"1-什么是模块\"><a href=\"#1-什么是模块\" class=\"headerlink\" title=\"1.什么是模块\"></a>1.什么是模块</h3><ul>\n<li>将复杂的程序依据一定的规则(规范)拆分成多个模块(文件)</li>\n<li>模块的内部数据与实现是私有的, 只是向外部暴露一些接口(方法)与外部其它模块通信</li>\n</ul>\n<h3 id=\"2-好处\"><a href=\"#2-好处\" class=\"headerlink\" title=\"2.好处\"></a>2.好处</h3><p>模块化开发方便代码的管理，提高代码复用性，降低代码耦合，每个模块都会有自己的作用域，防止变量污染。</p>\n<h3 id=\"3-Commonjs、-AMD和CMD分别有什么特点？\"><a href=\"#3-Commonjs、-AMD和CMD分别有什么特点？\" class=\"headerlink\" title=\"3.Commonjs、 AMD和CMD分别有什么特点？\"></a>3.Commonjs、 AMD和CMD分别有什么特点？</h3><ul>\n<li><strong>CommonJS 模块输出的是一个值的拷贝，CommonJS 模块是运行时加载</strong>，CommonJS规范主要用于服务端编程，<strong>加载模块是同步的</strong>，同步意味着阻塞加载，浏览器资源是异步加载的，因此有了AMD、CMD解决方案。</li>\n<li>AMD 是 <code>RequireJS</code> 在推广过程中对模块定义的规范化产出。AMD规范在浏览器环境中<strong>异步加载模块</strong>，而且可以并行加载多个模块。AMD 的 API 默认是<strong>一个当多个用</strong>，对于依赖的模块，<strong>AMD 推崇提前执行(依赖前置)</strong></li>\n<li>CMD 是 <code>SeaJS</code> 在推广过程中对模块定义的规范化产出。CMD 的 API 严格区分，职责单一<strong>，</strong>加载模块是异步的，CMD 推崇延迟执行（依赖就近）。**</li>\n<li><strong>ES6 模块输出的是值的引用，ES6 模块是编译时输出接口</strong>，ES6 在语言标准的层面上，实现了模块功能简单，完全可以成为浏览器和服务器通用的模块解决方案。</li>\n</ul>\n<h1 id=\"什么是闭包？\"><a href=\"#什么是闭包？\" class=\"headerlink\" title=\"什么是闭包？\"></a>什么是闭包？</h1><h3 id=\"闭包是一个有权访问其他函数作用域内的变量的函数。\"><a href=\"#闭包是一个有权访问其他函数作用域内的变量的函数。\" class=\"headerlink\" title=\"闭包是一个有权访问其他函数作用域内的变量的函数。\"></a>闭包是一个有权访问其他函数作用域内的变量的函数。</h3><p>由于在JS中，变量的作用域属于函数的作用域。函数在执行完之后，作用域会被销毁，内存也随之回收。但是闭包是创建在一个函数内部的子函数，由于其能访问上级作用域的原因，上级函数执行完之后作用域不会被销毁，此时子函数——也就是闭包，它拥有访问上级作用域的变量的权限，即使上级函数执行完之后作用域的变量也不会被销毁。</p>\n<h3 id=\"闭包解决了什么？\"><a href=\"#闭包解决了什么？\" class=\"headerlink\" title=\"闭包解决了什么？\"></a>闭包解决了什么？</h3><p>由于闭包可以缓存上级作用域，这使得外部函数打破“函数作用域”的束缚，可以访问函数内部的变量。这里以日常使用的Ajax成功回调为例，这个回调也是一个闭包，回调函数拥有对整个上级作用域的访问和操作能力，这样提供了较大的便利。开发者不需要再去写钩子函数去操作上级函数作用域内的变量了。</p>\n<h3 id=\"闭包有哪些应用场景\"><a href=\"#闭包有哪些应用场景\" class=\"headerlink\" title=\"闭包有哪些应用场景?\"></a>闭包有哪些应用场景?</h3><p>闭包随处可见，一个Ajax请求的成功回调，一个事件绑定的回调方法，一个setTimeout的延时回调，或者一个函数内部返回另一个匿名函数，这些都是闭包。简而言之，无论使用何种方式对函数类型的值进行传递，当函数在别处被调用时都有闭包的身影。</p>\n<p>箭头函数的this指向 </p>\n<p>行内和块级元素的区别</p>\n<p>行内元素如何设置宽高</p>\n<p>Flex：1什么意思</p>\n"},{"title":"Vue面试题","top":true,"cover":false,"img":"http://pc.lzlstudy.top/img/banner/1.jpg","toc":true,"mathjax":true,"date":"2021-01-11T04:51:20.000Z","summary":"本文为个人准备前端面试过程中的学习笔记。","_content":"# 1.v-show和v-if的区别？\n\n```vue\nv-if\t\t创建、删除\t（没有元素）\nv-show \t \t显示、隐藏\t（有元素）\n```\n\n**v-if**是“真正的”条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。\n\n**v-if**也是惰性的：如果在初始渲染时条件为假，则什么都不做，直到条件第一次变为真时，才会开始渲染条件块。\n\n相比之下，**v-show**就简单得多，不管初始条件是什么，元素总是会被渲染，并且只是简单地基于CSS进行显示隐藏切换。\n\n一般来说，v-if有更高的切换开销，**v-show**有更高的初始渲染开销。因此，如果需要频繁切换，则使用**v-show**较好；如果在运行时条件不太可能改变，则使用v-if较好；\n\n# 2、scss、stylus在vue中的使用，以及如何让css只在当前组件生效\n\n```js\n<style scoped>\n```\n\n**scss ：**\n\n```js\n1、下载\n\tnpm install sass-loader node-sass --save\n2、\n\t<style scoped lang=\"scss\">\n3、scss的样式穿透\n    父元素 /deep/ 子元素\n```\n\n**stylus：**\n\n```js\n1、下载\n\tnpm install stylus-loader stylus --save\n2、\n\t<style scoped lang=\"stylus\">\n3、scss的样式穿透\n    父元素 /deep/ 子元素\n    父元素 >>> 子元素\n```\n\n\n\nVue\n\n父子组件的通信\n\nWatch一般用来干什么\n\nVue路由hash history\n","source":"_posts/Vue-practice.md","raw":"---\ntitle: Vue面试题\ntop: true\ncover: false\nimg: 'http://pc.lzlstudy.top/img/banner/1.jpg'\ntoc: true\nmathjax: true\ndate: 2021-01-11 12:51:20\nsummary: 本文为个人准备前端面试过程中的学习笔记。\ntags:\n- Vue面试题\n- 春招\ncategories:\n- 前端面试题\n---\n# 1.v-show和v-if的区别？\n\n```vue\nv-if\t\t创建、删除\t（没有元素）\nv-show \t \t显示、隐藏\t（有元素）\n```\n\n**v-if**是“真正的”条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。\n\n**v-if**也是惰性的：如果在初始渲染时条件为假，则什么都不做，直到条件第一次变为真时，才会开始渲染条件块。\n\n相比之下，**v-show**就简单得多，不管初始条件是什么，元素总是会被渲染，并且只是简单地基于CSS进行显示隐藏切换。\n\n一般来说，v-if有更高的切换开销，**v-show**有更高的初始渲染开销。因此，如果需要频繁切换，则使用**v-show**较好；如果在运行时条件不太可能改变，则使用v-if较好；\n\n# 2、scss、stylus在vue中的使用，以及如何让css只在当前组件生效\n\n```js\n<style scoped>\n```\n\n**scss ：**\n\n```js\n1、下载\n\tnpm install sass-loader node-sass --save\n2、\n\t<style scoped lang=\"scss\">\n3、scss的样式穿透\n    父元素 /deep/ 子元素\n```\n\n**stylus：**\n\n```js\n1、下载\n\tnpm install stylus-loader stylus --save\n2、\n\t<style scoped lang=\"stylus\">\n3、scss的样式穿透\n    父元素 /deep/ 子元素\n    父元素 >>> 子元素\n```\n\n\n\nVue\n\n父子组件的通信\n\nWatch一般用来干什么\n\nVue路由hash history\n","slug":"Vue-practice","published":1,"updated":"2021-01-12T14:38:46.167Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjzdt5mm000380w1fuvda0en","content":"<h1 id=\"1-v-show和v-if的区别？\"><a href=\"#1-v-show和v-if的区别？\" class=\"headerlink\" title=\"1.v-show和v-if的区别？\"></a>1.v-show和v-if的区别？</h1><pre class=\"line-numbers language-vue\"><code class=\"language-vue\">v-if        创建、删除    （没有元素）\nv-show          显示、隐藏    （有元素）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>v-if</strong>是“真正的”条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</p>\n<p><strong>v-if</strong>也是惰性的：如果在初始渲染时条件为假，则什么都不做，直到条件第一次变为真时，才会开始渲染条件块。</p>\n<p>相比之下，<strong>v-show</strong>就简单得多，不管初始条件是什么，元素总是会被渲染，并且只是简单地基于CSS进行显示隐藏切换。</p>\n<p>一般来说，v-if有更高的切换开销，<strong>v-show</strong>有更高的初始渲染开销。因此，如果需要频繁切换，则使用<strong>v-show</strong>较好；如果在运行时条件不太可能改变，则使用v-if较好；</p>\n<h1 id=\"2、scss、stylus在vue中的使用，以及如何让css只在当前组件生效\"><a href=\"#2、scss、stylus在vue中的使用，以及如何让css只在当前组件生效\" class=\"headerlink\" title=\"2、scss、stylus在vue中的使用，以及如何让css只在当前组件生效\"></a>2、scss、stylus在vue中的使用，以及如何让css只在当前组件生效</h1><pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>style scoped<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><strong>scss ：</strong></p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token number\">1</span>、下载\n    npm install sass<span class=\"token operator\">-</span>loader node<span class=\"token operator\">-</span>sass <span class=\"token operator\">--</span>save\n<span class=\"token number\">2</span>、\n    <span class=\"token operator\">&lt;</span>style scoped lang<span class=\"token operator\">=</span><span class=\"token string\">\"scss\"</span><span class=\"token operator\">></span>\n<span class=\"token number\">3</span>、scss的样式穿透\n    父元素 <span class=\"token operator\">/</span>deep<span class=\"token operator\">/</span> 子元素<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>stylus：</strong></p>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token number\">1</span>、下载\n    npm install stylus<span class=\"token operator\">-</span>loader stylus <span class=\"token operator\">--</span>save\n<span class=\"token number\">2</span>、\n    <span class=\"token operator\">&lt;</span>style scoped lang<span class=\"token operator\">=</span><span class=\"token string\">\"stylus\"</span><span class=\"token operator\">></span>\n<span class=\"token number\">3</span>、scss的样式穿透\n    父元素 <span class=\"token operator\">/</span>deep<span class=\"token operator\">/</span> 子元素\n    父元素 <span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token operator\">></span> 子元素<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>Vue</p>\n<p>父子组件的通信</p>\n<p>Watch一般用来干什么</p>\n<p>Vue路由hash history</p>\n","site":{"data":{"banner":[{"name":"0.jpg"},{"name":"1.jpg"},{"name":"6.jpg"},{"name":"3.jpg"},{"name":"4.jpg"},{"name":"5.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h1 id=\"1-v-show和v-if的区别？\"><a href=\"#1-v-show和v-if的区别？\" class=\"headerlink\" title=\"1.v-show和v-if的区别？\"></a>1.v-show和v-if的区别？</h1><pre><code class=\"vue\">v-if        创建、删除    （没有元素）\nv-show          显示、隐藏    （有元素）</code></pre>\n<p><strong>v-if</strong>是“真正的”条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</p>\n<p><strong>v-if</strong>也是惰性的：如果在初始渲染时条件为假，则什么都不做，直到条件第一次变为真时，才会开始渲染条件块。</p>\n<p>相比之下，<strong>v-show</strong>就简单得多，不管初始条件是什么，元素总是会被渲染，并且只是简单地基于CSS进行显示隐藏切换。</p>\n<p>一般来说，v-if有更高的切换开销，<strong>v-show</strong>有更高的初始渲染开销。因此，如果需要频繁切换，则使用<strong>v-show</strong>较好；如果在运行时条件不太可能改变，则使用v-if较好；</p>\n<h1 id=\"2、scss、stylus在vue中的使用，以及如何让css只在当前组件生效\"><a href=\"#2、scss、stylus在vue中的使用，以及如何让css只在当前组件生效\" class=\"headerlink\" title=\"2、scss、stylus在vue中的使用，以及如何让css只在当前组件生效\"></a>2、scss、stylus在vue中的使用，以及如何让css只在当前组件生效</h1><pre><code class=\"js\">&lt;style scoped&gt;</code></pre>\n<p><strong>scss ：</strong></p>\n<pre><code class=\"js\">1、下载\n    npm install sass-loader node-sass --save\n2、\n    &lt;style scoped lang=&quot;scss&quot;&gt;\n3、scss的样式穿透\n    父元素 /deep/ 子元素</code></pre>\n<p><strong>stylus：</strong></p>\n<pre><code class=\"js\">1、下载\n    npm install stylus-loader stylus --save\n2、\n    &lt;style scoped lang=&quot;stylus&quot;&gt;\n3、scss的样式穿透\n    父元素 /deep/ 子元素\n    父元素 &gt;&gt;&gt; 子元素</code></pre>\n<p>Vue</p>\n<p>父子组件的通信</p>\n<p>Watch一般用来干什么</p>\n<p>Vue路由hash history</p>\n"},{"title":"前端笔试题错题总结（一）","top":true,"cover":true,"toc":true,"mathjax":true,"img":"http://pc.lzlstudy.top/img/banner/4.jpg","date":"2020-08-11T13:54:17.000Z","summary":"牛客网前端笔试题错题总结","_content":"\n# 1、静态语言和动态语言是什么？\n\n#### 静态语言（强类型语言）\n\n静态语言是在编译时变量的数据类型即可确定的语言，多数静态类型语言要求在使用变量之前**必须声明数据类型**。 \n例如：C++、Java、Delphi、C#等。\n\n#### 动态语言（弱类型语言）\n\n动态语言是在运行时确定数据类型的语言。变量使用之前**不需要类型声明**，通常变量的类型是**被赋值的那个值的类型**。 \n例如PHP/ASP/Ruby/Python/Perl/ABAP/SQL/JavaScript/Unix Shell等等。\n\n\n\n# 2、在JS里判断一个对象oStringObject是否为String？\n\n！！**这题有一个陷阱**：要判断的变量**oStringObject**是一个`对象`。\n\n- JS 中值的类型分为原始值类型和对象类型。**原始值类型包括 number, string, boolean, null 和 undefined；对象类型即 object。首先原始值类型它就不是对象**。\n- 另外，要**注意 'hello' 和 new String('hello') 的区别，前者是字符串字面值，属于原始类型，而后者是对象**。用 **typeof 运算符**返回的值也是完全不一样的：\n\n```js\ntypeof 'hello'; // 'string'\ntypeof new String('hello'); // 'object'\n```\n\n- 之所以很多人分不清**字符串字面值**和 String 对象，归根结底就是 JavaScript的语法对你们太过纵容了。当执行 `'helle'.length` 时，发现可以意料之中的返回 5，你们就觉得 `'hello'` 就是 String 对象，不然它怎么会有 String 对象的属性。**其实，这是由于 JS 在执行到这条语句的时候，内部将 'hello' 包装成了一个 String 对象，执行完后，再把这个对象丢弃了，这种语法叫做 “装箱”**，在其他面向对象语言里也有（如 C#）。\n\n\n\n# 3、以下代码的输出是什么？\n\n```\n以下代码执行后，console 的输出是？\nfunction Foo(){'use strict'\nconsole.log(this.location);\n}\nFoo()\n\n输出：\nUncaught TypeError: Cannot read property 'location' of undefined\nat Foo (<anonymous>:3:18)\nat <anonymous>:5:1\n```\n\n`'use strict'`是严格模式\n\n**严格模式下禁止this关键字指向全局对象**\n\n此时this为undefined。\n\n因为undefined不存在location属性，undefined.location 就会报错，**TypeError 类型**错误。\n\n\n\n```\n1、由于javascript的动态特性，常常直接采取key= val的形式赋值 错误！\n2、var carname=\"Volvo\";var carname; 顺序执行后，caranme的值依然为Volvo 正确！\n```\n\n第一题解释：JavaScript **一般**使用`var key = val`；的形式复制，声明变量的时候也要用`var key`； 如果不用**var**关键字，声明的就是**全局变量**，一般不要这么做；\n\n**第二题解释**：JavaScript代码执行时候，先**扫一遍**JavaScript代码，进行**变量定义**，定义时候**不赋值**，结束完成后，开始执行JavaScript代码，当执行到**赋值语句**的时候，开始给变量**赋值**。**如果两次声明都有赋值**，如：`var a=10; var a=100; `则**变量a的值是100**；\n\n","source":"_posts/practice-day1.md","raw":"---\ntitle: 前端笔试题错题总结（一）\ntop: true\ncover: true\ntoc: true\nmathjax: true\nimg: 'http://pc.lzlstudy.top/img/banner/4.jpg'\ndate: 2020-08-11 21:54:17\nsummary: \"牛客网前端笔试题错题总结\"\ntags: \n- 前端刷题\n- 牛客网\ncategories:\n- 前端面试题\n---\n\n# 1、静态语言和动态语言是什么？\n\n#### 静态语言（强类型语言）\n\n静态语言是在编译时变量的数据类型即可确定的语言，多数静态类型语言要求在使用变量之前**必须声明数据类型**。 \n例如：C++、Java、Delphi、C#等。\n\n#### 动态语言（弱类型语言）\n\n动态语言是在运行时确定数据类型的语言。变量使用之前**不需要类型声明**，通常变量的类型是**被赋值的那个值的类型**。 \n例如PHP/ASP/Ruby/Python/Perl/ABAP/SQL/JavaScript/Unix Shell等等。\n\n\n\n# 2、在JS里判断一个对象oStringObject是否为String？\n\n！！**这题有一个陷阱**：要判断的变量**oStringObject**是一个`对象`。\n\n- JS 中值的类型分为原始值类型和对象类型。**原始值类型包括 number, string, boolean, null 和 undefined；对象类型即 object。首先原始值类型它就不是对象**。\n- 另外，要**注意 'hello' 和 new String('hello') 的区别，前者是字符串字面值，属于原始类型，而后者是对象**。用 **typeof 运算符**返回的值也是完全不一样的：\n\n```js\ntypeof 'hello'; // 'string'\ntypeof new String('hello'); // 'object'\n```\n\n- 之所以很多人分不清**字符串字面值**和 String 对象，归根结底就是 JavaScript的语法对你们太过纵容了。当执行 `'helle'.length` 时，发现可以意料之中的返回 5，你们就觉得 `'hello'` 就是 String 对象，不然它怎么会有 String 对象的属性。**其实，这是由于 JS 在执行到这条语句的时候，内部将 'hello' 包装成了一个 String 对象，执行完后，再把这个对象丢弃了，这种语法叫做 “装箱”**，在其他面向对象语言里也有（如 C#）。\n\n\n\n# 3、以下代码的输出是什么？\n\n```\n以下代码执行后，console 的输出是？\nfunction Foo(){'use strict'\nconsole.log(this.location);\n}\nFoo()\n\n输出：\nUncaught TypeError: Cannot read property 'location' of undefined\nat Foo (<anonymous>:3:18)\nat <anonymous>:5:1\n```\n\n`'use strict'`是严格模式\n\n**严格模式下禁止this关键字指向全局对象**\n\n此时this为undefined。\n\n因为undefined不存在location属性，undefined.location 就会报错，**TypeError 类型**错误。\n\n\n\n```\n1、由于javascript的动态特性，常常直接采取key= val的形式赋值 错误！\n2、var carname=\"Volvo\";var carname; 顺序执行后，caranme的值依然为Volvo 正确！\n```\n\n第一题解释：JavaScript **一般**使用`var key = val`；的形式复制，声明变量的时候也要用`var key`； 如果不用**var**关键字，声明的就是**全局变量**，一般不要这么做；\n\n**第二题解释**：JavaScript代码执行时候，先**扫一遍**JavaScript代码，进行**变量定义**，定义时候**不赋值**，结束完成后，开始执行JavaScript代码，当执行到**赋值语句**的时候，开始给变量**赋值**。**如果两次声明都有赋值**，如：`var a=10; var a=100; `则**变量a的值是100**；\n\n","slug":"practice-day1","published":1,"updated":"2021-01-12T14:30:07.214Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjzdt5mu000780w1grlj0sqq","content":"<h1 id=\"1、静态语言和动态语言是什么？\"><a href=\"#1、静态语言和动态语言是什么？\" class=\"headerlink\" title=\"1、静态语言和动态语言是什么？\"></a>1、静态语言和动态语言是什么？</h1><h4 id=\"静态语言（强类型语言）\"><a href=\"#静态语言（强类型语言）\" class=\"headerlink\" title=\"静态语言（强类型语言）\"></a>静态语言（强类型语言）</h4><p>静态语言是在编译时变量的数据类型即可确定的语言，多数静态类型语言要求在使用变量之前<strong>必须声明数据类型</strong>。<br>例如：C++、Java、Delphi、C#等。</p>\n<h4 id=\"动态语言（弱类型语言）\"><a href=\"#动态语言（弱类型语言）\" class=\"headerlink\" title=\"动态语言（弱类型语言）\"></a>动态语言（弱类型语言）</h4><p>动态语言是在运行时确定数据类型的语言。变量使用之前<strong>不需要类型声明</strong>，通常变量的类型是<strong>被赋值的那个值的类型</strong>。<br>例如PHP/ASP/Ruby/Python/Perl/ABAP/SQL/JavaScript/Unix Shell等等。</p>\n<h1 id=\"2、在JS里判断一个对象oStringObject是否为String？\"><a href=\"#2、在JS里判断一个对象oStringObject是否为String？\" class=\"headerlink\" title=\"2、在JS里判断一个对象oStringObject是否为String？\"></a>2、在JS里判断一个对象oStringObject是否为String？</h1><p>！！<strong>这题有一个陷阱</strong>：要判断的变量<strong>oStringObject</strong>是一个<code>对象</code>。</p>\n<ul>\n<li>JS 中值的类型分为原始值类型和对象类型。<strong>原始值类型包括 number, string, boolean, null 和 undefined；对象类型即 object。首先原始值类型它就不是对象</strong>。</li>\n<li>另外，要<strong>注意 ‘hello’ 和 new String(‘hello’) 的区别，前者是字符串字面值，属于原始类型，而后者是对象</strong>。用 <strong>typeof 运算符</strong>返回的值也是完全不一样的：</li>\n</ul>\n<pre class=\"line-numbers language-js\"><code class=\"language-js\"><span class=\"token keyword\">typeof</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 'string'</span>\n<span class=\"token keyword\">typeof</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">// 'object'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li>之所以很多人分不清<strong>字符串字面值</strong>和 String 对象，归根结底就是 JavaScript的语法对你们太过纵容了。当执行 <code>&#39;helle&#39;.length</code> 时，发现可以意料之中的返回 5，你们就觉得 <code>&#39;hello&#39;</code> 就是 String 对象，不然它怎么会有 String 对象的属性。<strong>其实，这是由于 JS 在执行到这条语句的时候，内部将 ‘hello’ 包装成了一个 String 对象，执行完后，再把这个对象丢弃了，这种语法叫做 “装箱”</strong>，在其他面向对象语言里也有（如 C#）。</li>\n</ul>\n<h1 id=\"3、以下代码的输出是什么？\"><a href=\"#3、以下代码的输出是什么？\" class=\"headerlink\" title=\"3、以下代码的输出是什么？\"></a>3、以下代码的输出是什么？</h1><pre><code>以下代码执行后，console 的输出是？\nfunction Foo()&#123;&#39;use strict&#39;\nconsole.log(this.location);\n&#125;\nFoo()\n\n输出：\nUncaught TypeError: Cannot read property &#39;location&#39; of undefined\nat Foo (&lt;anonymous&gt;:3:18)\nat &lt;anonymous&gt;:5:1</code></pre><p><code>&#39;use strict&#39;</code>是严格模式</p>\n<p><strong>严格模式下禁止this关键字指向全局对象</strong></p>\n<p>此时this为undefined。</p>\n<p>因为undefined不存在location属性，undefined.location 就会报错，<strong>TypeError 类型</strong>错误。</p>\n<pre><code>1、由于javascript的动态特性，常常直接采取key= val的形式赋值 错误！\n2、var carname=&quot;Volvo&quot;;var carname; 顺序执行后，caranme的值依然为Volvo 正确！</code></pre><p>第一题解释：JavaScript <strong>一般</strong>使用<code>var key = val</code>；的形式复制，声明变量的时候也要用<code>var key</code>； 如果不用<strong>var</strong>关键字，声明的就是<strong>全局变量</strong>，一般不要这么做；</p>\n<p><strong>第二题解释</strong>：JavaScript代码执行时候，先<strong>扫一遍</strong>JavaScript代码，进行<strong>变量定义</strong>，定义时候<strong>不赋值</strong>，结束完成后，开始执行JavaScript代码，当执行到<strong>赋值语句</strong>的时候，开始给变量<strong>赋值</strong>。<strong>如果两次声明都有赋值</strong>，如：<code>var a=10; var a=100;</code>则<strong>变量a的值是100</strong>；</p>\n","site":{"data":{"banner":[{"name":"0.jpg"},{"name":"1.jpg"},{"name":"6.jpg"},{"name":"3.jpg"},{"name":"4.jpg"},{"name":"5.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<h1 id=\"1、静态语言和动态语言是什么？\"><a href=\"#1、静态语言和动态语言是什么？\" class=\"headerlink\" title=\"1、静态语言和动态语言是什么？\"></a>1、静态语言和动态语言是什么？</h1><h4 id=\"静态语言（强类型语言）\"><a href=\"#静态语言（强类型语言）\" class=\"headerlink\" title=\"静态语言（强类型语言）\"></a>静态语言（强类型语言）</h4><p>静态语言是在编译时变量的数据类型即可确定的语言，多数静态类型语言要求在使用变量之前<strong>必须声明数据类型</strong>。<br>例如：C++、Java、Delphi、C#等。</p>\n<h4 id=\"动态语言（弱类型语言）\"><a href=\"#动态语言（弱类型语言）\" class=\"headerlink\" title=\"动态语言（弱类型语言）\"></a>动态语言（弱类型语言）</h4><p>动态语言是在运行时确定数据类型的语言。变量使用之前<strong>不需要类型声明</strong>，通常变量的类型是<strong>被赋值的那个值的类型</strong>。<br>例如PHP/ASP/Ruby/Python/Perl/ABAP/SQL/JavaScript/Unix Shell等等。</p>\n<h1 id=\"2、在JS里判断一个对象oStringObject是否为String？\"><a href=\"#2、在JS里判断一个对象oStringObject是否为String？\" class=\"headerlink\" title=\"2、在JS里判断一个对象oStringObject是否为String？\"></a>2、在JS里判断一个对象oStringObject是否为String？</h1><p>！！<strong>这题有一个陷阱</strong>：要判断的变量<strong>oStringObject</strong>是一个<code>对象</code>。</p>\n<ul>\n<li>JS 中值的类型分为原始值类型和对象类型。<strong>原始值类型包括 number, string, boolean, null 和 undefined；对象类型即 object。首先原始值类型它就不是对象</strong>。</li>\n<li>另外，要<strong>注意 ‘hello’ 和 new String(‘hello’) 的区别，前者是字符串字面值，属于原始类型，而后者是对象</strong>。用 <strong>typeof 运算符</strong>返回的值也是完全不一样的：</li>\n</ul>\n<pre><code class=\"js\">typeof &#39;hello&#39;; // &#39;string&#39;\ntypeof new String(&#39;hello&#39;); // &#39;object&#39;</code></pre>\n<ul>\n<li>之所以很多人分不清<strong>字符串字面值</strong>和 String 对象，归根结底就是 JavaScript的语法对你们太过纵容了。当执行 <code>&#39;helle&#39;.length</code> 时，发现可以意料之中的返回 5，你们就觉得 <code>&#39;hello&#39;</code> 就是 String 对象，不然它怎么会有 String 对象的属性。<strong>其实，这是由于 JS 在执行到这条语句的时候，内部将 ‘hello’ 包装成了一个 String 对象，执行完后，再把这个对象丢弃了，这种语法叫做 “装箱”</strong>，在其他面向对象语言里也有（如 C#）。</li>\n</ul>\n<h1 id=\"3、以下代码的输出是什么？\"><a href=\"#3、以下代码的输出是什么？\" class=\"headerlink\" title=\"3、以下代码的输出是什么？\"></a>3、以下代码的输出是什么？</h1><pre><code>以下代码执行后，console 的输出是？\nfunction Foo()&#123;&#39;use strict&#39;\nconsole.log(this.location);\n&#125;\nFoo()\n\n输出：\nUncaught TypeError: Cannot read property &#39;location&#39; of undefined\nat Foo (&lt;anonymous&gt;:3:18)\nat &lt;anonymous&gt;:5:1</code></pre><p><code>&#39;use strict&#39;</code>是严格模式</p>\n<p><strong>严格模式下禁止this关键字指向全局对象</strong></p>\n<p>此时this为undefined。</p>\n<p>因为undefined不存在location属性，undefined.location 就会报错，<strong>TypeError 类型</strong>错误。</p>\n<pre><code>1、由于javascript的动态特性，常常直接采取key= val的形式赋值 错误！\n2、var carname=&quot;Volvo&quot;;var carname; 顺序执行后，caranme的值依然为Volvo 正确！</code></pre><p>第一题解释：JavaScript <strong>一般</strong>使用<code>var key = val</code>；的形式复制，声明变量的时候也要用<code>var key</code>； 如果不用<strong>var</strong>关键字，声明的就是<strong>全局变量</strong>，一般不要这么做；</p>\n<p><strong>第二题解释</strong>：JavaScript代码执行时候，先<strong>扫一遍</strong>JavaScript代码，进行<strong>变量定义</strong>，定义时候<strong>不赋值</strong>，结束完成后，开始执行JavaScript代码，当执行到<strong>赋值语句</strong>的时候，开始给变量<strong>赋值</strong>。<strong>如果两次声明都有赋值</strong>，如：<code>var a=10; var a=100;</code>则<strong>变量a的值是100</strong>；</p>\n"},{"title":"前端笔试题错题总结（二）","top":true,"cover":true,"toc":true,"mathjax":true,"img":"http://pc.lzlstudy.top/img/banner/5.jpg","date":"2020-08-12T14:50:17.000Z","summary":"牛客网前端笔试题错题总结","_content":"\n> JavaScript的保留字有哪些？\n\n![关键字1](1.jpg)\n\n![关键字2](2.jpg)\n\n> 原生JS阻止冒泡\n\n```\n假设DOM结构为：\n<div id=\"a\"><div id=\"b\"></div></div>\nJS代码为：\ndocument.getElementById('a').addEventListener('click', e => {console.log(1)});\ndocument.getElementById('b').addEventListener('click', e => {e.preventDefault();console.log(2)});\n当点击id为b的div时，控制台输出的内容是：\n2\n1\n```\n\ne.preventDefault() 是用来阻止默认事件的，不是阻止事件冒泡\n\n事件冒泡应该是 e.stopPropagation()\n\n\n\n> 转换成整数的方法\n\n```\n对于代码 var a = 10.42; 取出 a 的整数部分，以下代码哪些是正确的？\nparseInt(a); √\nMath.floor(a);√\nMath.ceil(a);X\na.split('.')[0];X\n```\n\nA. ==parseInt==转换为整数，默认为10进制，结果为10\n\nB. ==floor==向下取整，结果为10 \n\nC. ==ceil==向上取整，结果为11\n\nD. ==split==操作数必需为正则或字符串，结果为TypeError\n\n\n\n> JS中children 和 childNodes\n\n1. children \n   **children**：返回父元素所有的直系子节点的集合，注意，children**只返回HTML元素节点**，不包括文本节点和属性节点。\n2. childNodes \n   **childNodes**：返回父元素所有的直系子节点的集合，注意，与children不同的是，childNodes会返回**HTML元素节点**，属性节点，**文本节点**。\n\n有时候需要获取指定元素的第一个HTML子节点（非属性/文本节点），最容易想到的就是firstChild 属性。代码中第一个HTML节点前如果有换行，空格，那么firstChild返回的就不是你想要的了。可以使用nodeType来判断下。\n\n```\nfunction getFirst(elem){\n    for(var i=0,e;e=elem.childNodes[i++];){\n        if(e.nodeType==1)\n            return e;\n    }\n}\n```\n\n","source":"_posts/practive-day2.md","raw":"---\ntitle: 前端笔试题错题总结（二）\ntop: true\ncover: true\ntoc: true\nmathjax: true\nimg: 'http://pc.lzlstudy.top/img/banner/5.jpg'\ndate: 2020-08-12 22:50:17\nsummary: \"牛客网前端笔试题错题总结\"\ntags: \n- 前端刷题\n- 牛客网\ncategories:\n- 前端面试题\n---\n\n> JavaScript的保留字有哪些？\n\n![关键字1](1.jpg)\n\n![关键字2](2.jpg)\n\n> 原生JS阻止冒泡\n\n```\n假设DOM结构为：\n<div id=\"a\"><div id=\"b\"></div></div>\nJS代码为：\ndocument.getElementById('a').addEventListener('click', e => {console.log(1)});\ndocument.getElementById('b').addEventListener('click', e => {e.preventDefault();console.log(2)});\n当点击id为b的div时，控制台输出的内容是：\n2\n1\n```\n\ne.preventDefault() 是用来阻止默认事件的，不是阻止事件冒泡\n\n事件冒泡应该是 e.stopPropagation()\n\n\n\n> 转换成整数的方法\n\n```\n对于代码 var a = 10.42; 取出 a 的整数部分，以下代码哪些是正确的？\nparseInt(a); √\nMath.floor(a);√\nMath.ceil(a);X\na.split('.')[0];X\n```\n\nA. ==parseInt==转换为整数，默认为10进制，结果为10\n\nB. ==floor==向下取整，结果为10 \n\nC. ==ceil==向上取整，结果为11\n\nD. ==split==操作数必需为正则或字符串，结果为TypeError\n\n\n\n> JS中children 和 childNodes\n\n1. children \n   **children**：返回父元素所有的直系子节点的集合，注意，children**只返回HTML元素节点**，不包括文本节点和属性节点。\n2. childNodes \n   **childNodes**：返回父元素所有的直系子节点的集合，注意，与children不同的是，childNodes会返回**HTML元素节点**，属性节点，**文本节点**。\n\n有时候需要获取指定元素的第一个HTML子节点（非属性/文本节点），最容易想到的就是firstChild 属性。代码中第一个HTML节点前如果有换行，空格，那么firstChild返回的就不是你想要的了。可以使用nodeType来判断下。\n\n```\nfunction getFirst(elem){\n    for(var i=0,e;e=elem.childNodes[i++];){\n        if(e.nodeType==1)\n            return e;\n    }\n}\n```\n\n","slug":"practive-day2","published":1,"updated":"2021-01-13T15:16:28.434Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjzdt5mw000980w10fpk69m3","content":"<blockquote>\n<p>JavaScript的保留字有哪些？</p>\n</blockquote>\n<p><img src=\"1.jpg\" alt=\"关键字1\"></p>\n<p><img src=\"2.jpg\" alt=\"关键字2\"></p>\n<blockquote>\n<p>原生JS阻止冒泡</p>\n</blockquote>\n<pre><code>假设DOM结构为：\n&lt;div id=&quot;a&quot;&gt;&lt;div id=&quot;b&quot;&gt;&lt;/div&gt;&lt;/div&gt;\nJS代码为：\ndocument.getElementById(&#39;a&#39;).addEventListener(&#39;click&#39;, e =&gt; &#123;console.log(1)&#125;);\ndocument.getElementById(&#39;b&#39;).addEventListener(&#39;click&#39;, e =&gt; &#123;e.preventDefault();console.log(2)&#125;);\n当点击id为b的div时，控制台输出的内容是：\n2\n1</code></pre><p>e.preventDefault() 是用来阻止默认事件的，不是阻止事件冒泡</p>\n<p>事件冒泡应该是 e.stopPropagation()</p>\n<blockquote>\n<p>转换成整数的方法</p>\n</blockquote>\n<pre><code>对于代码 var a = 10.42; 取出 a 的整数部分，以下代码哪些是正确的？\nparseInt(a); √\nMath.floor(a);√\nMath.ceil(a);X\na.split(&#39;.&#39;)[0];X</code></pre><p>A. ==parseInt==转换为整数，默认为10进制，结果为10</p>\n<p>B. ==floor==向下取整，结果为10 </p>\n<p>C. ==ceil==向上取整，结果为11</p>\n<p>D. ==split==操作数必需为正则或字符串，结果为TypeError</p>\n<blockquote>\n<p>JS中children 和 childNodes</p>\n</blockquote>\n<ol>\n<li>children<br><strong>children</strong>：返回父元素所有的直系子节点的集合，注意，children<strong>只返回HTML元素节点</strong>，不包括文本节点和属性节点。</li>\n<li>childNodes<br><strong>childNodes</strong>：返回父元素所有的直系子节点的集合，注意，与children不同的是，childNodes会返回<strong>HTML元素节点</strong>，属性节点，<strong>文本节点</strong>。</li>\n</ol>\n<p>有时候需要获取指定元素的第一个HTML子节点（非属性/文本节点），最容易想到的就是firstChild 属性。代码中第一个HTML节点前如果有换行，空格，那么firstChild返回的就不是你想要的了。可以使用nodeType来判断下。</p>\n<pre><code>function getFirst(elem)&#123;\n    for(var i=0,e;e=elem.childNodes[i++];)&#123;\n        if(e.nodeType==1)\n            return e;\n    &#125;\n&#125;</code></pre>","site":{"data":{"banner":[{"name":"0.jpg"},{"name":"1.jpg"},{"name":"6.jpg"},{"name":"3.jpg"},{"name":"4.jpg"},{"name":"5.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<blockquote>\n<p>JavaScript的保留字有哪些？</p>\n</blockquote>\n<p><img src=\"1.jpg\" alt=\"关键字1\"></p>\n<p><img src=\"2.jpg\" alt=\"关键字2\"></p>\n<blockquote>\n<p>原生JS阻止冒泡</p>\n</blockquote>\n<pre><code>假设DOM结构为：\n&lt;div id=&quot;a&quot;&gt;&lt;div id=&quot;b&quot;&gt;&lt;/div&gt;&lt;/div&gt;\nJS代码为：\ndocument.getElementById(&#39;a&#39;).addEventListener(&#39;click&#39;, e =&gt; &#123;console.log(1)&#125;);\ndocument.getElementById(&#39;b&#39;).addEventListener(&#39;click&#39;, e =&gt; &#123;e.preventDefault();console.log(2)&#125;);\n当点击id为b的div时，控制台输出的内容是：\n2\n1</code></pre><p>e.preventDefault() 是用来阻止默认事件的，不是阻止事件冒泡</p>\n<p>事件冒泡应该是 e.stopPropagation()</p>\n<blockquote>\n<p>转换成整数的方法</p>\n</blockquote>\n<pre><code>对于代码 var a = 10.42; 取出 a 的整数部分，以下代码哪些是正确的？\nparseInt(a); √\nMath.floor(a);√\nMath.ceil(a);X\na.split(&#39;.&#39;)[0];X</code></pre><p>A. ==parseInt==转换为整数，默认为10进制，结果为10</p>\n<p>B. ==floor==向下取整，结果为10 </p>\n<p>C. ==ceil==向上取整，结果为11</p>\n<p>D. ==split==操作数必需为正则或字符串，结果为TypeError</p>\n<blockquote>\n<p>JS中children 和 childNodes</p>\n</blockquote>\n<ol>\n<li>children<br><strong>children</strong>：返回父元素所有的直系子节点的集合，注意，children<strong>只返回HTML元素节点</strong>，不包括文本节点和属性节点。</li>\n<li>childNodes<br><strong>childNodes</strong>：返回父元素所有的直系子节点的集合，注意，与children不同的是，childNodes会返回<strong>HTML元素节点</strong>，属性节点，<strong>文本节点</strong>。</li>\n</ol>\n<p>有时候需要获取指定元素的第一个HTML子节点（非属性/文本节点），最容易想到的就是firstChild 属性。代码中第一个HTML节点前如果有换行，空格，那么firstChild返回的就不是你想要的了。可以使用nodeType来判断下。</p>\n<pre><code>function getFirst(elem)&#123;\n    for(var i=0,e;e=elem.childNodes[i++];)&#123;\n        if(e.nodeType==1)\n            return e;\n    &#125;\n&#125;</code></pre>"},{"title":"十大经典排序算法整理汇总（附代码）","top":true,"cover":true,"toc":true,"mathjax":true,"date":"2020-02-16T07:09:23.000Z","password":null,"summary":"本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。","_content":"\n> 关注公众号【算法码上来】，每日算法干货马上就来！\n\n![](/medias/contact.jpg)\n\n## 前言\n\n本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。\n\n**本文并不会详细讲解每种排序算法的原理**，网上有很多很好的教程，大家可以自己去搜了看。\n\n最后我还亲自手写了十种排序算法的 c++ 代码，大家可以用来通过 [LeetCode 912. 排序数组](https://leetcode-cn.com/problems/sort-an-array/ \"LeetCode 912. 排序数组\") 这道题。\n\n## 性质汇总\n\n> 如果发现表中有错误，请留言告知。\n\n|   算法  |   最好  |  最坏   |  平均   |  空间   |  稳定性   | 是否基于比较\n| --- | --- | --- | --- | --- | :---: | :---: |\n|  冒泡排序   |  $O(n)$   |   $O(n^2)$  |  $O(n^2)$   |  $O(1)$   | $\\checkmark$  | $\\checkmark$ |\n|   选择排序  |  $O(n^2)$  |   $O(n^2)$  |  $O(n^2)$   |  $O(1)$   | $\\times$  | $\\checkmark$ |\n|   插入排序  |  $O(n)$   |   $O(n^2)$  |  $O(n^2)$   |  $O(1)$   | $\\checkmark$  | $\\checkmark$ |\n|  快速排序   |  $O(n\\log n)$   |  $O(n^2)$   |  $O(n\\log n)$   |  $O(\\log n)$~$O(n)$   |  $\\times$   | $\\checkmark$ |\n|  归并排序   |  $O(n\\log n)$   |   $O(n\\log n)$  |  $O(n\\log n)$   |   $O(n)$  |  $\\checkmark$   | $\\checkmark$ |\n|   希尔排序  |  $O(n^{1.3})$   |   $O(n^2)$  |  $O(n\\log n)$~$O(n^2)$   |  $O(1)$   | $\\times$    | $\\checkmark$ |\n|  计数排序   |  $O(n+k)$   |   $O(n+k)$  |   $O(n+k)$  |  $O(n+k)$   |  $\\checkmark$   | $\\times$ |\n|   基数排序  |   $O(nk)$  |  $O(nk)$   |   $O(nk)$  |   $O(n+k)$  |  $\\checkmark$   | $\\times$ |\n|  桶排序   |   $O(n)$  |   $O(n)$  |   $O(n)$  |  $O(n+m)$   |  $\\checkmark$   | $\\times$ |\n|  堆排序   |  $O(n\\log n)$   |   $O(n\\log n)$  |  $O(n\\log n)$   |   $O(1)$  |  $\\times$   | $\\checkmark$ |\n\n\n\n> 如果表格显示有问题的话，还可以直接看下面的汇总图：\n\n![十大经典排序算法性质汇总](1.png)\n\n### 维基百科\n\n我觉得还是英文维基百科讲的比较详细、严谨。如果大家看的比较累的话，可以自己百度搜索相应的教程。\n\n**冒泡排序**  \n[https://en.wikipedia.org/wiki/Bubble_sort](https://en.wikipedia.org/wiki/Bubble_sort)\n\n**选择排序**  \n[https://en.wikipedia.org/wiki/Selection_sort](https://en.wikipedia.org/wiki/Selection_sort)\n\n**插入排序**  \n[https://en.wikipedia.org/wiki/Insertion_sort](https://en.wikipedia.org/wiki/Insertion_sort)\n\n**快速排序**  \n[https://en.wikipedia.org/wiki/Quicksort](https://en.wikipedia.org/wiki/Quicksort)\n\n**归并排序**  \n[https://en.wikipedia.org/wiki/Merge_sort](https://en.wikipedia.org/wiki/Merge_sort)\n\n**希尔排序**  \n[https://en.wikipedia.org/wiki/Shellsort](https://en.wikipedia.org/wiki/Shellsort)\n\n**计数排序**  \n[https://en.wikipedia.org/wiki/Counting_sort](https://en.wikipedia.org/wiki/Counting_sort)\n\n**基数排序**  \n[https://en.wikipedia.org/wiki/Radix_sort](https://en.wikipedia.org/wiki/Radix_sort)\n\n**桶排序**  \n[https://en.wikipedia.org/wiki/Bucket_sort](https://en.wikipedia.org/wiki/Bucket_sort)\n\n**堆排序**  \n[https://en.wikipedia.org/wiki/Heapsort](https://en.wikipedia.org/wiki/Heapsort)\n\n## 代码实现\n\n所有的排序算法接口都是相同的，也就是 `vector<int> xxxSort(vector<int>& nums)` 。只需要你传入一个 `vector<int>` 类型的数组，就能返回排序后的结果。\n\n运行下来可以发现，桶排序速度是比较快的。而冒泡排序、选择排序和插入排序因为时间复杂度太高无法通过本题，基数排序因为无法处理负数也不能通过本题。\n\n```cpp\nclass Solution {\npublic:\n    vector<int> sortArray(vector<int>& nums) {\n        return quickSort(nums);\n    }\n\n    // 冒泡排序（超时）\n    vector<int> bubbleSort(vector<int>& nums) {\n        int n = nums.size();\n        for (int i = 0; i < n; ++i) {\n            for (int j = n-2; j >= i; --j) {\n                if (nums[j] > nums[j+1]) {\n                    swap(nums[j], nums[j+1]);\n                }\n            }\n        }\n        return nums;\n    }\n\n    // 选择排序（超时）\n    vector<int> selectSort(vector<int>& nums) {\n        int n = nums.size();\n        for (int i = 0; i < n; ++i) {\n            int idx = i;\n            for (int j = i; j < n; ++j) {\n                if (nums[j] < nums[idx]) {\n                    idx = j;\n                }\n            }\n            swap(nums[i], nums[idx]);\n        }\n        return nums;\n    }\n\n    // 插入排序（超时）\n    vector<int> insertSort(vector<int>& nums) {\n        int n = nums.size();\n        for (int i = 0; i < n; ++i) {\n            for (int j = i; j > 0 && nums[j] < nums[j-1]; --j) {\n                swap(nums[j], nums[j-1]);\n            }\n        }\n        return nums;\n    }\n\n    // 快速排序（24 ms）\n    void qSort(vector<int>& nums, int l, int r) {\n        if (l >= r) return;\n        int m = l;\n        for (int i = l; i < r; ++i) {\n            if (nums[i] < nums[r]) {\n                swap(nums[m++], nums[i]);\n            }\n        }\n        swap(nums[m], nums[r]);\n        qSort(nums, l, m-1);\n        qSort(nums, m+1, r);\n    }\n\n    vector<int> quickSort(vector<int>& nums) {\n        int n = nums.size();\n        qSort(nums, 0, n-1);\n        return nums;\n    }\n\n    // 归并排序（192 ms）\n    vector<int> mSort(vector<int>& nums, int l, int r) {\n        if (l >= r) return {nums[l]};\n        int m = l+(r-l)/2;\n        vector<int> lnums = mSort(nums, l, m);\n        vector<int> rnums = mSort(nums, m+1, r);\n        vector<int> res;\n        int i = 0, j = 0;\n        while (i <= m-l && j <= r-m-1) {\n            if (lnums[i] < rnums[j]) {\n                res.push_back(lnums[i++]);\n            } else {\n                res.push_back(rnums[j++]);\n            }\n        }\n        while (i <= m-l) {\n            res.push_back(lnums[i++]);\n        }\n        while (j <= r-m-1) {\n            res.push_back(rnums[j++]);\n        }\n        return res;\n    }\n\n    vector<int> mergeSort(vector<int>& nums) {\n        int n = nums.size();\n        nums = mSort(nums, 0, n-1);\n        return nums;\n    }\n\n    // 归并排序 + 非递归（80 ms）\n    vector<int> mergeSortNR(vector<int>& nums) {\n        int n = nums.size();\n        for (int len = 1; len < n; len <<= 1) {\n            for (int l = 0; l < n-len; l += 2*len) {\n                int m = l+len-1;\n                int r = min(n-1, l+2*len-1);\n                vector<int> res;\n                int i = l, j = m+1;\n                while (i <= m && j <= r) {\n                    if (nums[i] < nums[j]) {\n                        res.push_back(nums[i++]);\n                    } else {\n                        res.push_back(nums[j++]);\n                    }\n                }\n                while (i <= m) {\n                    res.push_back(nums[i++]);\n                }\n                while (j <= r) {\n                    res.push_back(nums[j++]);\n                }\n                for (int i = l; i <= r; ++i) {\n                    nums[i] = res[i-l];\n                }\n            }\n        }\n        return nums;\n    }\n\n    // 希尔排序（40 ms）\n    vector<int> shellSort(vector<int>& nums) {\n        int n = nums.size();\n        for (int gap = n/2; gap > 0; gap /= 2) {\n            for (int i = gap; i < n; ++i) {\n                for (int j = i; j-gap >= 0 && nums[j-gap] > nums[j]; j -= gap) {\n                    swap(nums[j-gap], nums[j]);\n                }\n            }\n        }\n        return nums;\n    }\n\n    // 计数排序（32 ms）\n    vector<int> countSort(vector<int>& nums) {\n        int n = nums.size();\n        if (!n) return {};\n        int minv = *min_element(nums.begin(), nums.end());\n        int maxv = *max_element(nums.begin(), nums.end());\n        int m = maxv-minv+1;\n        vector<int> count(m, 0);\n        for (int i = 0; i < n; ++i) {\n            count[nums[i]-minv]++;\n        }\n        vector<int> res;\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < count[i]; ++j) {\n                res.push_back(i+minv);\n            }\n        }\n        return res;\n    }\n\n    // 基数排序（不适用于负数）\n    vector<int> radixSort(vector<int>& nums) {\n        int n = nums.size();\n        int maxv = *max_element(nums.begin(), nums.end());\n        int maxd = 0;\n        while (maxv > 0) {\n            maxv /= 10;\n            maxd++;\n        }\n        vector<int> count(10, 0), rank(n, 0);\n        int base = 1;\n        while (maxd > 0) {\n            count.assign(10, 0);\n            for (int i = 0; i < n; ++i) {\n                count[(nums[i]/base)%10]++;\n            }\n            for (int i = 1; i < 10; ++i) {\n                count[i] += count[i-1];\n            }\n            for (int i = n-1; i >= 0; --i) {\n                rank[--count[(nums[i]/base)%10]] = nums[i];\n            }\n            for (int i = 0; i < n; ++i) {\n                nums[i] = rank[i];\n            }\n            maxd--;\n            base *= 10;\n        }\n        return nums;\n    }\n\n    // 桶排序 (20 ms)\n    vector<int> bucketSort(vector<int>& nums) {\n        int n = nums.size();\n        int maxv = *max_element(nums.begin(), nums.end());\n        int minv = *min_element(nums.begin(), nums.end());\n        int bs = 1000;\n        int m = (maxv-minv)/bs+1;\n        vector<vector<int> > bucket(m);\n        for (int i = 0; i < n; ++i) {\n            bucket[(nums[i]-minv)/bs].push_back(nums[i]);\n        }\n        int idx = 0;\n        for (int i = 0; i < m; ++i) {\n            int sz = bucket[i].size();\n            bucket[i] = quickSort(bucket[i]);\n            for (int j = 0; j < sz; ++j) {\n                nums[idx++] = bucket[i][j];\n            }\n        }\n        return nums;\n    }\n\n    // 堆排序（32 ms）\n    void adjust(vector<int>& nums, int p, int s) {\n        while (2*p+1 < s) {\n            int c1 = 2*p+1;\n            int c2 = 2*p+2;\n            int c = (c2<s && nums[c2]>nums[c1]) ? c2 : c1;\n            if (nums[c] > nums[p]) swap(nums[c], nums[p]);\n            else break;\n            p = c;\n        }\n    }\n\n    vector<int> heapSort(vector<int>& nums) {\n        int n = nums.size();\n        for (int i = n/2-1; i >= 0; --i) {\n            adjust(nums, i, n);\n        }\n        for (int i = n-1; i > 0; --i) {\n            swap(nums[0], nums[i]);\n            adjust(nums, 0, i);\n        }\n        return nums;\n    }\n};\n```","source":"_posts/sort-algorithms.md","raw":"---\ntitle: 十大经典排序算法整理汇总（附代码）\ntop: true\ncover: true\ntoc: true\nmathjax: true\ndate: 2020-02-16 15:09:23\npassword:\nsummary: 本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。\ntags:\n- leetcode\n- 算法\ncategories:\n- 编程算法\n---\n\n> 关注公众号【算法码上来】，每日算法干货马上就来！\n\n![](/medias/contact.jpg)\n\n## 前言\n\n本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。\n\n**本文并不会详细讲解每种排序算法的原理**，网上有很多很好的教程，大家可以自己去搜了看。\n\n最后我还亲自手写了十种排序算法的 c++ 代码，大家可以用来通过 [LeetCode 912. 排序数组](https://leetcode-cn.com/problems/sort-an-array/ \"LeetCode 912. 排序数组\") 这道题。\n\n## 性质汇总\n\n> 如果发现表中有错误，请留言告知。\n\n|   算法  |   最好  |  最坏   |  平均   |  空间   |  稳定性   | 是否基于比较\n| --- | --- | --- | --- | --- | :---: | :---: |\n|  冒泡排序   |  $O(n)$   |   $O(n^2)$  |  $O(n^2)$   |  $O(1)$   | $\\checkmark$  | $\\checkmark$ |\n|   选择排序  |  $O(n^2)$  |   $O(n^2)$  |  $O(n^2)$   |  $O(1)$   | $\\times$  | $\\checkmark$ |\n|   插入排序  |  $O(n)$   |   $O(n^2)$  |  $O(n^2)$   |  $O(1)$   | $\\checkmark$  | $\\checkmark$ |\n|  快速排序   |  $O(n\\log n)$   |  $O(n^2)$   |  $O(n\\log n)$   |  $O(\\log n)$~$O(n)$   |  $\\times$   | $\\checkmark$ |\n|  归并排序   |  $O(n\\log n)$   |   $O(n\\log n)$  |  $O(n\\log n)$   |   $O(n)$  |  $\\checkmark$   | $\\checkmark$ |\n|   希尔排序  |  $O(n^{1.3})$   |   $O(n^2)$  |  $O(n\\log n)$~$O(n^2)$   |  $O(1)$   | $\\times$    | $\\checkmark$ |\n|  计数排序   |  $O(n+k)$   |   $O(n+k)$  |   $O(n+k)$  |  $O(n+k)$   |  $\\checkmark$   | $\\times$ |\n|   基数排序  |   $O(nk)$  |  $O(nk)$   |   $O(nk)$  |   $O(n+k)$  |  $\\checkmark$   | $\\times$ |\n|  桶排序   |   $O(n)$  |   $O(n)$  |   $O(n)$  |  $O(n+m)$   |  $\\checkmark$   | $\\times$ |\n|  堆排序   |  $O(n\\log n)$   |   $O(n\\log n)$  |  $O(n\\log n)$   |   $O(1)$  |  $\\times$   | $\\checkmark$ |\n\n\n\n> 如果表格显示有问题的话，还可以直接看下面的汇总图：\n\n![十大经典排序算法性质汇总](1.png)\n\n### 维基百科\n\n我觉得还是英文维基百科讲的比较详细、严谨。如果大家看的比较累的话，可以自己百度搜索相应的教程。\n\n**冒泡排序**  \n[https://en.wikipedia.org/wiki/Bubble_sort](https://en.wikipedia.org/wiki/Bubble_sort)\n\n**选择排序**  \n[https://en.wikipedia.org/wiki/Selection_sort](https://en.wikipedia.org/wiki/Selection_sort)\n\n**插入排序**  \n[https://en.wikipedia.org/wiki/Insertion_sort](https://en.wikipedia.org/wiki/Insertion_sort)\n\n**快速排序**  \n[https://en.wikipedia.org/wiki/Quicksort](https://en.wikipedia.org/wiki/Quicksort)\n\n**归并排序**  \n[https://en.wikipedia.org/wiki/Merge_sort](https://en.wikipedia.org/wiki/Merge_sort)\n\n**希尔排序**  \n[https://en.wikipedia.org/wiki/Shellsort](https://en.wikipedia.org/wiki/Shellsort)\n\n**计数排序**  \n[https://en.wikipedia.org/wiki/Counting_sort](https://en.wikipedia.org/wiki/Counting_sort)\n\n**基数排序**  \n[https://en.wikipedia.org/wiki/Radix_sort](https://en.wikipedia.org/wiki/Radix_sort)\n\n**桶排序**  \n[https://en.wikipedia.org/wiki/Bucket_sort](https://en.wikipedia.org/wiki/Bucket_sort)\n\n**堆排序**  \n[https://en.wikipedia.org/wiki/Heapsort](https://en.wikipedia.org/wiki/Heapsort)\n\n## 代码实现\n\n所有的排序算法接口都是相同的，也就是 `vector<int> xxxSort(vector<int>& nums)` 。只需要你传入一个 `vector<int>` 类型的数组，就能返回排序后的结果。\n\n运行下来可以发现，桶排序速度是比较快的。而冒泡排序、选择排序和插入排序因为时间复杂度太高无法通过本题，基数排序因为无法处理负数也不能通过本题。\n\n```cpp\nclass Solution {\npublic:\n    vector<int> sortArray(vector<int>& nums) {\n        return quickSort(nums);\n    }\n\n    // 冒泡排序（超时）\n    vector<int> bubbleSort(vector<int>& nums) {\n        int n = nums.size();\n        for (int i = 0; i < n; ++i) {\n            for (int j = n-2; j >= i; --j) {\n                if (nums[j] > nums[j+1]) {\n                    swap(nums[j], nums[j+1]);\n                }\n            }\n        }\n        return nums;\n    }\n\n    // 选择排序（超时）\n    vector<int> selectSort(vector<int>& nums) {\n        int n = nums.size();\n        for (int i = 0; i < n; ++i) {\n            int idx = i;\n            for (int j = i; j < n; ++j) {\n                if (nums[j] < nums[idx]) {\n                    idx = j;\n                }\n            }\n            swap(nums[i], nums[idx]);\n        }\n        return nums;\n    }\n\n    // 插入排序（超时）\n    vector<int> insertSort(vector<int>& nums) {\n        int n = nums.size();\n        for (int i = 0; i < n; ++i) {\n            for (int j = i; j > 0 && nums[j] < nums[j-1]; --j) {\n                swap(nums[j], nums[j-1]);\n            }\n        }\n        return nums;\n    }\n\n    // 快速排序（24 ms）\n    void qSort(vector<int>& nums, int l, int r) {\n        if (l >= r) return;\n        int m = l;\n        for (int i = l; i < r; ++i) {\n            if (nums[i] < nums[r]) {\n                swap(nums[m++], nums[i]);\n            }\n        }\n        swap(nums[m], nums[r]);\n        qSort(nums, l, m-1);\n        qSort(nums, m+1, r);\n    }\n\n    vector<int> quickSort(vector<int>& nums) {\n        int n = nums.size();\n        qSort(nums, 0, n-1);\n        return nums;\n    }\n\n    // 归并排序（192 ms）\n    vector<int> mSort(vector<int>& nums, int l, int r) {\n        if (l >= r) return {nums[l]};\n        int m = l+(r-l)/2;\n        vector<int> lnums = mSort(nums, l, m);\n        vector<int> rnums = mSort(nums, m+1, r);\n        vector<int> res;\n        int i = 0, j = 0;\n        while (i <= m-l && j <= r-m-1) {\n            if (lnums[i] < rnums[j]) {\n                res.push_back(lnums[i++]);\n            } else {\n                res.push_back(rnums[j++]);\n            }\n        }\n        while (i <= m-l) {\n            res.push_back(lnums[i++]);\n        }\n        while (j <= r-m-1) {\n            res.push_back(rnums[j++]);\n        }\n        return res;\n    }\n\n    vector<int> mergeSort(vector<int>& nums) {\n        int n = nums.size();\n        nums = mSort(nums, 0, n-1);\n        return nums;\n    }\n\n    // 归并排序 + 非递归（80 ms）\n    vector<int> mergeSortNR(vector<int>& nums) {\n        int n = nums.size();\n        for (int len = 1; len < n; len <<= 1) {\n            for (int l = 0; l < n-len; l += 2*len) {\n                int m = l+len-1;\n                int r = min(n-1, l+2*len-1);\n                vector<int> res;\n                int i = l, j = m+1;\n                while (i <= m && j <= r) {\n                    if (nums[i] < nums[j]) {\n                        res.push_back(nums[i++]);\n                    } else {\n                        res.push_back(nums[j++]);\n                    }\n                }\n                while (i <= m) {\n                    res.push_back(nums[i++]);\n                }\n                while (j <= r) {\n                    res.push_back(nums[j++]);\n                }\n                for (int i = l; i <= r; ++i) {\n                    nums[i] = res[i-l];\n                }\n            }\n        }\n        return nums;\n    }\n\n    // 希尔排序（40 ms）\n    vector<int> shellSort(vector<int>& nums) {\n        int n = nums.size();\n        for (int gap = n/2; gap > 0; gap /= 2) {\n            for (int i = gap; i < n; ++i) {\n                for (int j = i; j-gap >= 0 && nums[j-gap] > nums[j]; j -= gap) {\n                    swap(nums[j-gap], nums[j]);\n                }\n            }\n        }\n        return nums;\n    }\n\n    // 计数排序（32 ms）\n    vector<int> countSort(vector<int>& nums) {\n        int n = nums.size();\n        if (!n) return {};\n        int minv = *min_element(nums.begin(), nums.end());\n        int maxv = *max_element(nums.begin(), nums.end());\n        int m = maxv-minv+1;\n        vector<int> count(m, 0);\n        for (int i = 0; i < n; ++i) {\n            count[nums[i]-minv]++;\n        }\n        vector<int> res;\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < count[i]; ++j) {\n                res.push_back(i+minv);\n            }\n        }\n        return res;\n    }\n\n    // 基数排序（不适用于负数）\n    vector<int> radixSort(vector<int>& nums) {\n        int n = nums.size();\n        int maxv = *max_element(nums.begin(), nums.end());\n        int maxd = 0;\n        while (maxv > 0) {\n            maxv /= 10;\n            maxd++;\n        }\n        vector<int> count(10, 0), rank(n, 0);\n        int base = 1;\n        while (maxd > 0) {\n            count.assign(10, 0);\n            for (int i = 0; i < n; ++i) {\n                count[(nums[i]/base)%10]++;\n            }\n            for (int i = 1; i < 10; ++i) {\n                count[i] += count[i-1];\n            }\n            for (int i = n-1; i >= 0; --i) {\n                rank[--count[(nums[i]/base)%10]] = nums[i];\n            }\n            for (int i = 0; i < n; ++i) {\n                nums[i] = rank[i];\n            }\n            maxd--;\n            base *= 10;\n        }\n        return nums;\n    }\n\n    // 桶排序 (20 ms)\n    vector<int> bucketSort(vector<int>& nums) {\n        int n = nums.size();\n        int maxv = *max_element(nums.begin(), nums.end());\n        int minv = *min_element(nums.begin(), nums.end());\n        int bs = 1000;\n        int m = (maxv-minv)/bs+1;\n        vector<vector<int> > bucket(m);\n        for (int i = 0; i < n; ++i) {\n            bucket[(nums[i]-minv)/bs].push_back(nums[i]);\n        }\n        int idx = 0;\n        for (int i = 0; i < m; ++i) {\n            int sz = bucket[i].size();\n            bucket[i] = quickSort(bucket[i]);\n            for (int j = 0; j < sz; ++j) {\n                nums[idx++] = bucket[i][j];\n            }\n        }\n        return nums;\n    }\n\n    // 堆排序（32 ms）\n    void adjust(vector<int>& nums, int p, int s) {\n        while (2*p+1 < s) {\n            int c1 = 2*p+1;\n            int c2 = 2*p+2;\n            int c = (c2<s && nums[c2]>nums[c1]) ? c2 : c1;\n            if (nums[c] > nums[p]) swap(nums[c], nums[p]);\n            else break;\n            p = c;\n        }\n    }\n\n    vector<int> heapSort(vector<int>& nums) {\n        int n = nums.size();\n        for (int i = n/2-1; i >= 0; --i) {\n            adjust(nums, i, n);\n        }\n        for (int i = n-1; i > 0; --i) {\n            swap(nums[0], nums[i]);\n            adjust(nums, 0, i);\n        }\n        return nums;\n    }\n};\n```","slug":"sort-algorithms","published":1,"updated":"2021-01-09T17:55:01.746Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckjzdt5my000b80w19r9bdok2","content":"<blockquote>\n<p>关注公众号【算法码上来】，每日算法干货马上就来！</p>\n</blockquote>\n<p><img src=\"/medias/contact.jpg\" alt=\"\"></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。</p>\n<p><strong>本文并不会详细讲解每种排序算法的原理</strong>，网上有很多很好的教程，大家可以自己去搜了看。</p>\n<p>最后我还亲自手写了十种排序算法的 c++ 代码，大家可以用来通过 <a href=\"https://leetcode-cn.com/problems/sort-an-array/\" title=\"LeetCode 912. 排序数组\">LeetCode 912. 排序数组</a> 这道题。</p>\n<h2 id=\"性质汇总\"><a href=\"#性质汇总\" class=\"headerlink\" title=\"性质汇总\"></a>性质汇总</h2><blockquote>\n<p>如果发现表中有错误，请留言告知。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>算法</th>\n<th>最好</th>\n<th>最坏</th>\n<th>平均</th>\n<th>空间</th>\n<th align=\"center\">稳定性</th>\n<th align=\"center\">是否基于比较</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>冒泡排序</td>\n<td>$O(n)$</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n<td>$O(1)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>选择排序</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n<td>$O(1)$</td>\n<td align=\"center\">$\\times$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>插入排序</td>\n<td>$O(n)$</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n<td>$O(1)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>快速排序</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n^2)$</td>\n<td>$O(n\\log n)$</td>\n<td>$O(\\log n)$~$O(n)$</td>\n<td align=\"center\">$\\times$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>归并排序</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>希尔排序</td>\n<td>$O(n^{1.3})$</td>\n<td>$O(n^2)$</td>\n<td>$O(n\\log n)$~$O(n^2)$</td>\n<td>$O(1)$</td>\n<td align=\"center\">$\\times$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>计数排序</td>\n<td>$O(n+k)$</td>\n<td>$O(n+k)$</td>\n<td>$O(n+k)$</td>\n<td>$O(n+k)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\times$</td>\n</tr>\n<tr>\n<td>基数排序</td>\n<td>$O(nk)$</td>\n<td>$O(nk)$</td>\n<td>$O(nk)$</td>\n<td>$O(n+k)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\times$</td>\n</tr>\n<tr>\n<td>桶排序</td>\n<td>$O(n)$</td>\n<td>$O(n)$</td>\n<td>$O(n)$</td>\n<td>$O(n+m)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\times$</td>\n</tr>\n<tr>\n<td>堆排序</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n\\log n)$</td>\n<td>$O(1)$</td>\n<td align=\"center\">$\\times$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>如果表格显示有问题的话，还可以直接看下面的汇总图：</p>\n</blockquote>\n<p><img src=\"1.png\" alt=\"十大经典排序算法性质汇总\"></p>\n<h3 id=\"维基百科\"><a href=\"#维基百科\" class=\"headerlink\" title=\"维基百科\"></a>维基百科</h3><p>我觉得还是英文维基百科讲的比较详细、严谨。如果大家看的比较累的话，可以自己百度搜索相应的教程。</p>\n<p><strong>冒泡排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Bubble_sort\">https://en.wikipedia.org/wiki/Bubble_sort</a></p>\n<p><strong>选择排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Selection_sort\">https://en.wikipedia.org/wiki/Selection_sort</a></p>\n<p><strong>插入排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Insertion_sort\">https://en.wikipedia.org/wiki/Insertion_sort</a></p>\n<p><strong>快速排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Quicksort\">https://en.wikipedia.org/wiki/Quicksort</a></p>\n<p><strong>归并排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Merge_sort\">https://en.wikipedia.org/wiki/Merge_sort</a></p>\n<p><strong>希尔排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Shellsort\">https://en.wikipedia.org/wiki/Shellsort</a></p>\n<p><strong>计数排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Counting_sort\">https://en.wikipedia.org/wiki/Counting_sort</a></p>\n<p><strong>基数排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Radix_sort\">https://en.wikipedia.org/wiki/Radix_sort</a></p>\n<p><strong>桶排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Bucket_sort\">https://en.wikipedia.org/wiki/Bucket_sort</a></p>\n<p><strong>堆排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Heapsort\">https://en.wikipedia.org/wiki/Heapsort</a></p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>所有的排序算法接口都是相同的，也就是 <code>vector&lt;int&gt; xxxSort(vector&lt;int&gt;&amp; nums)</code> 。只需要你传入一个 <code>vector&lt;int&gt;</code> 类型的数组，就能返回排序后的结果。</p>\n<p>运行下来可以发现，桶排序速度是比较快的。而冒泡排序、选择排序和插入排序因为时间复杂度太高无法通过本题，基数排序因为无法处理负数也不能通过本题。</p>\n<pre class=\"line-numbers language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">sortArray</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 冒泡排序（超时）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">bubbleSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> n<span class=\"token number\">-2</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> i<span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 选择排序（超时）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">selectSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                    idx <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n                <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 插入排序（超时）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">insertSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 快速排序（24 ms）</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">qSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">>=</span> r<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> r<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>m<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">qSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> m<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">qSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">qSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 归并排序（192 ms）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">mSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">>=</span> r<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>nums<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> l<span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>l<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> lnums <span class=\"token operator\">=</span> <span class=\"token function\">mSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> rnums <span class=\"token operator\">=</span> <span class=\"token function\">mSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> res<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> m<span class=\"token operator\">-</span>l <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;=</span> r<span class=\"token operator\">-</span>m<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lnums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> rnums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>lnums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">else</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>rnums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> m<span class=\"token operator\">-</span>l<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>lnums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;=</span> r<span class=\"token operator\">-</span>m<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>rnums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">mergeSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        nums <span class=\"token operator\">=</span> <span class=\"token function\">mSort</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 归并排序 + 非递归（80 ms）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">mergeSortNR</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> len <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> len <span class=\"token operator\">&lt;&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> l <span class=\"token operator\">&lt;</span> n<span class=\"token operator\">-</span>len<span class=\"token punctuation\">;</span> l <span class=\"token operator\">+</span><span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>len<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> l<span class=\"token operator\">+</span>len<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span>n<span class=\"token number\">-1</span><span class=\"token punctuation\">,</span> l<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>len<span class=\"token number\">-1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> res<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> l<span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> m <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                        res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">else</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                        res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n                <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> m<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                    res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                    res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> l<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> r<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                    nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> res<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 希尔排序（40 ms）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">shellSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> gap <span class=\"token operator\">=</span> n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> gap <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> gap <span class=\"token operator\">/</span><span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> gap<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">-</span>gap <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>gap<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">-</span><span class=\"token operator\">=</span> gap<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>gap<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 计数排序（32 ms）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">countSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> minv <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token function\">min_element</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> maxv <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token function\">max_element</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> maxv<span class=\"token operator\">-</span>minv<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            count<span class=\"token punctuation\">[</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>minv<span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> res<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                res<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span>minv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 基数排序（不适用于负数）</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">radixSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> maxv <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token function\">max_element</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> maxd <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>maxv <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            maxv <span class=\"token operator\">/</span><span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n            maxd<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">rank</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> base <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>maxd <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            count<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                count<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span>base<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                count<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token operator\">=</span> count<span class=\"token punctuation\">[</span>i<span class=\"token number\">-1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                rank<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>count<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span>base<span class=\"token punctuation\">)</span><span class=\"token operator\">%</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> rank<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n            maxd<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            base <span class=\"token operator\">*</span><span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 桶排序 (20 ms)</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">bucketSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> maxv <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token function\">max_element</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> minv <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token function\">min_element</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> bs <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> m <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>maxv<span class=\"token operator\">-</span>minv<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>bs<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        vector<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">></span> <span class=\"token function\">bucket</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            bucket<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>minv<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>bs<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> idx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> sz <span class=\"token operator\">=</span> bucket<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            bucket<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>bucket<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> sz<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                nums<span class=\"token punctuation\">[</span>idx<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> bucket<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">// 堆排序（32 ms）</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">adjust</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> s<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>p<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> c1 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>p<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> c2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>p<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>c2<span class=\"token operator\">&lt;</span>s <span class=\"token operator\">&amp;&amp;</span> nums<span class=\"token punctuation\">[</span>c2<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>nums<span class=\"token punctuation\">[</span>c1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> c2 <span class=\"token operator\">:</span> c1<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> nums<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>c<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">else</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            p <span class=\"token operator\">=</span> c<span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">heapSort</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> nums<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">adjust</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n<span class=\"token number\">-1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">adjust</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> nums<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"banner":[{"name":"0.jpg"},{"name":"1.jpg"},{"name":"6.jpg"},{"name":"3.jpg"},{"name":"4.jpg"},{"name":"5.jpg"}],"friends":[{"name":"godweiyang","url":"https://godweiyang.com","title":"访问主页","introduction":"公众号【算法码上来】，分享深度学习与NLP算法","avatar":"https://godweiyang.com/medias/avatars/avatar.jpg"},{"name":"知乎专栏","url":"https://zhuanlan.zhihu.com/godweiyang","title":"访问主页","introduction":"一个有温度的深度学习小屋","avatar":"/medias/avatars/myzhihu.png"}],"musics":[{"name":"夜曲","artist":"周杰伦","url":"/medias/music/yequ.mp3","cover":"/medias/music/avatars/yequ.jpg"},{"name":"一路向北","artist":"周杰伦","url":"/medias/music/yiluxiangbei.mp3","cover":"/medias/music/avatars/yiluxiangbei.jpg"},{"name":"来自天堂的魔鬼","artist":"邓紫棋","url":"/medias/music/tiantangdemogui.mp3","cover":"/medias/music/avatars/tiantangdemogui.jpg"},{"name":"倒数","artist":"邓紫棋","url":"/medias/music/daoshu.mp3","cover":"/medias/music/avatars/daoshu.jpg"}]}},"excerpt":"","more":"<blockquote>\n<p>关注公众号【算法码上来】，每日算法干货马上就来！</p>\n</blockquote>\n<p><img src=\"/medias/contact.jpg\" alt=\"\"></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。</p>\n<p><strong>本文并不会详细讲解每种排序算法的原理</strong>，网上有很多很好的教程，大家可以自己去搜了看。</p>\n<p>最后我还亲自手写了十种排序算法的 c++ 代码，大家可以用来通过 <a href=\"https://leetcode-cn.com/problems/sort-an-array/\" title=\"LeetCode 912. 排序数组\">LeetCode 912. 排序数组</a> 这道题。</p>\n<h2 id=\"性质汇总\"><a href=\"#性质汇总\" class=\"headerlink\" title=\"性质汇总\"></a>性质汇总</h2><blockquote>\n<p>如果发现表中有错误，请留言告知。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>算法</th>\n<th>最好</th>\n<th>最坏</th>\n<th>平均</th>\n<th>空间</th>\n<th align=\"center\">稳定性</th>\n<th align=\"center\">是否基于比较</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>冒泡排序</td>\n<td>$O(n)$</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n<td>$O(1)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>选择排序</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n<td>$O(1)$</td>\n<td align=\"center\">$\\times$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>插入排序</td>\n<td>$O(n)$</td>\n<td>$O(n^2)$</td>\n<td>$O(n^2)$</td>\n<td>$O(1)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>快速排序</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n^2)$</td>\n<td>$O(n\\log n)$</td>\n<td>$O(\\log n)$~$O(n)$</td>\n<td align=\"center\">$\\times$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>归并排序</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>希尔排序</td>\n<td>$O(n^{1.3})$</td>\n<td>$O(n^2)$</td>\n<td>$O(n\\log n)$~$O(n^2)$</td>\n<td>$O(1)$</td>\n<td align=\"center\">$\\times$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n<tr>\n<td>计数排序</td>\n<td>$O(n+k)$</td>\n<td>$O(n+k)$</td>\n<td>$O(n+k)$</td>\n<td>$O(n+k)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\times$</td>\n</tr>\n<tr>\n<td>基数排序</td>\n<td>$O(nk)$</td>\n<td>$O(nk)$</td>\n<td>$O(nk)$</td>\n<td>$O(n+k)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\times$</td>\n</tr>\n<tr>\n<td>桶排序</td>\n<td>$O(n)$</td>\n<td>$O(n)$</td>\n<td>$O(n)$</td>\n<td>$O(n+m)$</td>\n<td align=\"center\">$\\checkmark$</td>\n<td align=\"center\">$\\times$</td>\n</tr>\n<tr>\n<td>堆排序</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n\\log n)$</td>\n<td>$O(n\\log n)$</td>\n<td>$O(1)$</td>\n<td align=\"center\">$\\times$</td>\n<td align=\"center\">$\\checkmark$</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>如果表格显示有问题的话，还可以直接看下面的汇总图：</p>\n</blockquote>\n<p><img src=\"1.png\" alt=\"十大经典排序算法性质汇总\"></p>\n<h3 id=\"维基百科\"><a href=\"#维基百科\" class=\"headerlink\" title=\"维基百科\"></a>维基百科</h3><p>我觉得还是英文维基百科讲的比较详细、严谨。如果大家看的比较累的话，可以自己百度搜索相应的教程。</p>\n<p><strong>冒泡排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Bubble_sort\">https://en.wikipedia.org/wiki/Bubble_sort</a></p>\n<p><strong>选择排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Selection_sort\">https://en.wikipedia.org/wiki/Selection_sort</a></p>\n<p><strong>插入排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Insertion_sort\">https://en.wikipedia.org/wiki/Insertion_sort</a></p>\n<p><strong>快速排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Quicksort\">https://en.wikipedia.org/wiki/Quicksort</a></p>\n<p><strong>归并排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Merge_sort\">https://en.wikipedia.org/wiki/Merge_sort</a></p>\n<p><strong>希尔排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Shellsort\">https://en.wikipedia.org/wiki/Shellsort</a></p>\n<p><strong>计数排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Counting_sort\">https://en.wikipedia.org/wiki/Counting_sort</a></p>\n<p><strong>基数排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Radix_sort\">https://en.wikipedia.org/wiki/Radix_sort</a></p>\n<p><strong>桶排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Bucket_sort\">https://en.wikipedia.org/wiki/Bucket_sort</a></p>\n<p><strong>堆排序</strong><br><a href=\"https://en.wikipedia.org/wiki/Heapsort\">https://en.wikipedia.org/wiki/Heapsort</a></p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>所有的排序算法接口都是相同的，也就是 <code>vector&lt;int&gt; xxxSort(vector&lt;int&gt;&amp; nums)</code> 。只需要你传入一个 <code>vector&lt;int&gt;</code> 类型的数组，就能返回排序后的结果。</p>\n<p>运行下来可以发现，桶排序速度是比较快的。而冒泡排序、选择排序和插入排序因为时间复杂度太高无法通过本题，基数排序因为无法处理负数也不能通过本题。</p>\n<pre><code class=\"cpp\">class Solution &#123;\npublic:\n    vector&lt;int&gt; sortArray(vector&lt;int&gt;&amp; nums) &#123;\n        return quickSort(nums);\n    &#125;\n\n    // 冒泡排序（超时）\n    vector&lt;int&gt; bubbleSort(vector&lt;int&gt;&amp; nums) &#123;\n        int n = nums.size();\n        for (int i = 0; i &lt; n; ++i) &#123;\n            for (int j = n-2; j &gt;= i; --j) &#123;\n                if (nums[j] &gt; nums[j+1]) &#123;\n                    swap(nums[j], nums[j+1]);\n                &#125;\n            &#125;\n        &#125;\n        return nums;\n    &#125;\n\n    // 选择排序（超时）\n    vector&lt;int&gt; selectSort(vector&lt;int&gt;&amp; nums) &#123;\n        int n = nums.size();\n        for (int i = 0; i &lt; n; ++i) &#123;\n            int idx = i;\n            for (int j = i; j &lt; n; ++j) &#123;\n                if (nums[j] &lt; nums[idx]) &#123;\n                    idx = j;\n                &#125;\n            &#125;\n            swap(nums[i], nums[idx]);\n        &#125;\n        return nums;\n    &#125;\n\n    // 插入排序（超时）\n    vector&lt;int&gt; insertSort(vector&lt;int&gt;&amp; nums) &#123;\n        int n = nums.size();\n        for (int i = 0; i &lt; n; ++i) &#123;\n            for (int j = i; j &gt; 0 &amp;&amp; nums[j] &lt; nums[j-1]; --j) &#123;\n                swap(nums[j], nums[j-1]);\n            &#125;\n        &#125;\n        return nums;\n    &#125;\n\n    // 快速排序（24 ms）\n    void qSort(vector&lt;int&gt;&amp; nums, int l, int r) &#123;\n        if (l &gt;= r) return;\n        int m = l;\n        for (int i = l; i &lt; r; ++i) &#123;\n            if (nums[i] &lt; nums[r]) &#123;\n                swap(nums[m++], nums[i]);\n            &#125;\n        &#125;\n        swap(nums[m], nums[r]);\n        qSort(nums, l, m-1);\n        qSort(nums, m+1, r);\n    &#125;\n\n    vector&lt;int&gt; quickSort(vector&lt;int&gt;&amp; nums) &#123;\n        int n = nums.size();\n        qSort(nums, 0, n-1);\n        return nums;\n    &#125;\n\n    // 归并排序（192 ms）\n    vector&lt;int&gt; mSort(vector&lt;int&gt;&amp; nums, int l, int r) &#123;\n        if (l &gt;= r) return &#123;nums[l]&#125;;\n        int m = l+(r-l)/2;\n        vector&lt;int&gt; lnums = mSort(nums, l, m);\n        vector&lt;int&gt; rnums = mSort(nums, m+1, r);\n        vector&lt;int&gt; res;\n        int i = 0, j = 0;\n        while (i &lt;= m-l &amp;&amp; j &lt;= r-m-1) &#123;\n            if (lnums[i] &lt; rnums[j]) &#123;\n                res.push_back(lnums[i++]);\n            &#125; else &#123;\n                res.push_back(rnums[j++]);\n            &#125;\n        &#125;\n        while (i &lt;= m-l) &#123;\n            res.push_back(lnums[i++]);\n        &#125;\n        while (j &lt;= r-m-1) &#123;\n            res.push_back(rnums[j++]);\n        &#125;\n        return res;\n    &#125;\n\n    vector&lt;int&gt; mergeSort(vector&lt;int&gt;&amp; nums) &#123;\n        int n = nums.size();\n        nums = mSort(nums, 0, n-1);\n        return nums;\n    &#125;\n\n    // 归并排序 + 非递归（80 ms）\n    vector&lt;int&gt; mergeSortNR(vector&lt;int&gt;&amp; nums) &#123;\n        int n = nums.size();\n        for (int len = 1; len &lt; n; len &lt;&lt;= 1) &#123;\n            for (int l = 0; l &lt; n-len; l += 2*len) &#123;\n                int m = l+len-1;\n                int r = min(n-1, l+2*len-1);\n                vector&lt;int&gt; res;\n                int i = l, j = m+1;\n                while (i &lt;= m &amp;&amp; j &lt;= r) &#123;\n                    if (nums[i] &lt; nums[j]) &#123;\n                        res.push_back(nums[i++]);\n                    &#125; else &#123;\n                        res.push_back(nums[j++]);\n                    &#125;\n                &#125;\n                while (i &lt;= m) &#123;\n                    res.push_back(nums[i++]);\n                &#125;\n                while (j &lt;= r) &#123;\n                    res.push_back(nums[j++]);\n                &#125;\n                for (int i = l; i &lt;= r; ++i) &#123;\n                    nums[i] = res[i-l];\n                &#125;\n            &#125;\n        &#125;\n        return nums;\n    &#125;\n\n    // 希尔排序（40 ms）\n    vector&lt;int&gt; shellSort(vector&lt;int&gt;&amp; nums) &#123;\n        int n = nums.size();\n        for (int gap = n/2; gap &gt; 0; gap /= 2) &#123;\n            for (int i = gap; i &lt; n; ++i) &#123;\n                for (int j = i; j-gap &gt;= 0 &amp;&amp; nums[j-gap] &gt; nums[j]; j -= gap) &#123;\n                    swap(nums[j-gap], nums[j]);\n                &#125;\n            &#125;\n        &#125;\n        return nums;\n    &#125;\n\n    // 计数排序（32 ms）\n    vector&lt;int&gt; countSort(vector&lt;int&gt;&amp; nums) &#123;\n        int n = nums.size();\n        if (!n) return &#123;&#125;;\n        int minv = *min_element(nums.begin(), nums.end());\n        int maxv = *max_element(nums.begin(), nums.end());\n        int m = maxv-minv+1;\n        vector&lt;int&gt; count(m, 0);\n        for (int i = 0; i &lt; n; ++i) &#123;\n            count[nums[i]-minv]++;\n        &#125;\n        vector&lt;int&gt; res;\n        for (int i = 0; i &lt; m; ++i) &#123;\n            for (int j = 0; j &lt; count[i]; ++j) &#123;\n                res.push_back(i+minv);\n            &#125;\n        &#125;\n        return res;\n    &#125;\n\n    // 基数排序（不适用于负数）\n    vector&lt;int&gt; radixSort(vector&lt;int&gt;&amp; nums) &#123;\n        int n = nums.size();\n        int maxv = *max_element(nums.begin(), nums.end());\n        int maxd = 0;\n        while (maxv &gt; 0) &#123;\n            maxv /= 10;\n            maxd++;\n        &#125;\n        vector&lt;int&gt; count(10, 0), rank(n, 0);\n        int base = 1;\n        while (maxd &gt; 0) &#123;\n            count.assign(10, 0);\n            for (int i = 0; i &lt; n; ++i) &#123;\n                count[(nums[i]/base)%10]++;\n            &#125;\n            for (int i = 1; i &lt; 10; ++i) &#123;\n                count[i] += count[i-1];\n            &#125;\n            for (int i = n-1; i &gt;= 0; --i) &#123;\n                rank[--count[(nums[i]/base)%10]] = nums[i];\n            &#125;\n            for (int i = 0; i &lt; n; ++i) &#123;\n                nums[i] = rank[i];\n            &#125;\n            maxd--;\n            base *= 10;\n        &#125;\n        return nums;\n    &#125;\n\n    // 桶排序 (20 ms)\n    vector&lt;int&gt; bucketSort(vector&lt;int&gt;&amp; nums) &#123;\n        int n = nums.size();\n        int maxv = *max_element(nums.begin(), nums.end());\n        int minv = *min_element(nums.begin(), nums.end());\n        int bs = 1000;\n        int m = (maxv-minv)/bs+1;\n        vector&lt;vector&lt;int&gt; &gt; bucket(m);\n        for (int i = 0; i &lt; n; ++i) &#123;\n            bucket[(nums[i]-minv)/bs].push_back(nums[i]);\n        &#125;\n        int idx = 0;\n        for (int i = 0; i &lt; m; ++i) &#123;\n            int sz = bucket[i].size();\n            bucket[i] = quickSort(bucket[i]);\n            for (int j = 0; j &lt; sz; ++j) &#123;\n                nums[idx++] = bucket[i][j];\n            &#125;\n        &#125;\n        return nums;\n    &#125;\n\n    // 堆排序（32 ms）\n    void adjust(vector&lt;int&gt;&amp; nums, int p, int s) &#123;\n        while (2*p+1 &lt; s) &#123;\n            int c1 = 2*p+1;\n            int c2 = 2*p+2;\n            int c = (c2&lt;s &amp;&amp; nums[c2]&gt;nums[c1]) ? c2 : c1;\n            if (nums[c] &gt; nums[p]) swap(nums[c], nums[p]);\n            else break;\n            p = c;\n        &#125;\n    &#125;\n\n    vector&lt;int&gt; heapSort(vector&lt;int&gt;&amp; nums) &#123;\n        int n = nums.size();\n        for (int i = n/2-1; i &gt;= 0; --i) &#123;\n            adjust(nums, i, n);\n        &#125;\n        for (int i = n-1; i &gt; 0; --i) &#123;\n            swap(nums[0], nums[i]);\n            adjust(nums, 0, i);\n        &#125;\n        return nums;\n    &#125;\n&#125;;</code></pre>\n"}],"PostAsset":[{"_id":"source/_posts/JS-practice/0.png","slug":"0.png","post":"ckjzdt5me000180w17xcv793f","modified":0,"renderable":0},{"_id":"source/_posts/JS-practice/1.png","slug":"1.png","post":"ckjzdt5me000180w17xcv793f","modified":0,"renderable":0},{"_id":"source/_posts/JS-practice/2.png","slug":"2.png","post":"ckjzdt5me000180w17xcv793f","modified":0,"renderable":0},{"_id":"source/_posts/practive-day2/1.jpg","slug":"1.jpg","post":"ckjzdt5mw000980w10fpk69m3","modified":0,"renderable":0},{"_id":"source/_posts/practive-day2/2.jpg","slug":"2.jpg","post":"ckjzdt5mw000980w10fpk69m3","modified":0,"renderable":0},{"_id":"source/_posts/sort-algorithms/1.png","slug":"1.png","post":"ckjzdt5my000b80w19r9bdok2","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckjzdt5mw000980w10fpk69m3","category_id":"ckjzdt5mp000480w11u7e15z8","_id":"ckjzdt5ng000g80w116alfaeu"},{"post_id":"ckjzdt5me000180w17xcv793f","category_id":"ckjzdt5mp000480w11u7e15z8","_id":"ckjzdt5nh000j80w1b9cm5hf0"},{"post_id":"ckjzdt5mm000380w1fuvda0en","category_id":"ckjzdt5mp000480w11u7e15z8","_id":"ckjzdt5ni000m80w18nkhecir"},{"post_id":"ckjzdt5mu000780w1grlj0sqq","category_id":"ckjzdt5mp000480w11u7e15z8","_id":"ckjzdt5nj000p80w1dg4k67yc"},{"post_id":"ckjzdt5my000b80w19r9bdok2","category_id":"ckjzdt5ni000l80w11xfs4sgh","_id":"ckjzdt5nk000s80w19gatesyt"}],"PostTag":[{"post_id":"ckjzdt5me000180w17xcv793f","tag_id":"ckjzdt5mr000580w1d7328o9e","_id":"ckjzdt5ni000k80w19fz95qc8"},{"post_id":"ckjzdt5me000180w17xcv793f","tag_id":"ckjzdt5n0000d80w18ut8510y","_id":"ckjzdt5ni000n80w1fmwz88fy"},{"post_id":"ckjzdt5mm000380w1fuvda0en","tag_id":"ckjzdt5nh000i80w10gc20bl9","_id":"ckjzdt5nk000r80w1g8sv35vx"},{"post_id":"ckjzdt5mm000380w1fuvda0en","tag_id":"ckjzdt5n0000d80w18ut8510y","_id":"ckjzdt5nk000t80w1fz9k4fyl"},{"post_id":"ckjzdt5mu000780w1grlj0sqq","tag_id":"ckjzdt5nj000q80w11lln63pm","_id":"ckjzdt5nm000w80w1fas2dx6p"},{"post_id":"ckjzdt5mu000780w1grlj0sqq","tag_id":"ckjzdt5nk000u80w10ckjck7y","_id":"ckjzdt5nm000x80w10isr2c7v"},{"post_id":"ckjzdt5mw000980w10fpk69m3","tag_id":"ckjzdt5nj000q80w11lln63pm","_id":"ckjzdt5no001080w12p2p2dql"},{"post_id":"ckjzdt5mw000980w10fpk69m3","tag_id":"ckjzdt5nk000u80w10ckjck7y","_id":"ckjzdt5np001180w127v7aabs"},{"post_id":"ckjzdt5my000b80w19r9bdok2","tag_id":"ckjzdt5no000z80w11e0c6tv4","_id":"ckjzdt5np001380w1fgmuhmmf"},{"post_id":"ckjzdt5my000b80w19r9bdok2","tag_id":"ckjzdt5np001280w17a5ybp6d","_id":"ckjzdt5np001480w130ooag9j"}],"Tag":[{"name":"JavaScript面试题","_id":"ckjzdt5mr000580w1d7328o9e"},{"name":"春招","_id":"ckjzdt5n0000d80w18ut8510y"},{"name":"Vue面试题","_id":"ckjzdt5nh000i80w10gc20bl9"},{"name":"前端刷题","_id":"ckjzdt5nj000q80w11lln63pm"},{"name":"牛客网","_id":"ckjzdt5nk000u80w10ckjck7y"},{"name":"leetcode","_id":"ckjzdt5no000z80w11e0c6tv4"},{"name":"算法","_id":"ckjzdt5np001280w17a5ybp6d"}]}}